{"version":3,"sources":["Constants/constants.js","Components/DisplayFEN.js","Functions/ADC.js","Functions/utils.js","Functions/fenBoard.js","Functions/submitMove.js","Functions/fenGen.js","Components/GameBoard.js","Components/MoveHistory.js","CustomHooks/useFetch.js","Components/GameInfo.js","GlobalStyles.js","Components/BoardOptions.js","App.js","reportWebVitals.js","index.js"],"names":["startingPosition","piece_moves","n","b","r","q","k","pawn_captures","w","pawn_moves","ranks","files","SQUARES","Fen","styled","input","DisplayFEN","fen","setFen","useState","setInput","boardInits","boardCurrents","validateFEN","fenCheck","validate","rows","split","length","i","sum","previous_was_number","j","isNaN","test","parseInt","type","value","onChange","ev","target","includes","setADC","board","piece","square","color","forEach","move","targetSquare","controlledBy","push","initADC","white_pieces","black_pieces","info","pieceType","toLowerCase","squareHex","algebraic","f","file","rank","substring","fenBoard","pieces","charAt","indexOf","numEmpty","hexId","algId","pieceColor","pieceInfo","squareAlg","match","submitMove","from","to","moveSAN","moveHistory","promotion","pieceCase","console","log","ksq","rsq","kDest","rDest","toUpperCase","empty","fenGen","newHistory","current","san","Wrapper","div","InfoWrapper","Square","Piece","img","Ranks","Rank","Files","File","Board","GameBoard","showBlkCtrl","showWhtCtrl","selected","setSelected","clickSquare","id","map","findex","rindex","selectedId","multiplier","isSelected","find","obj","Object","values","allyControl","filter","x","enemyControl","alpha","importance","blue","red","className","onClick","src","style","backgroundColor","Moves","Move","span","MoveHistory","index","pieceChar","comma","useFetch","url","initialState","status","error","data","useReducer","state","action","payload","dispatch","cache","useRef","useEffect","cancelRequest","a","fetch","response","json","message","fetchData","Login","button","Handle","Profile","Tabs","Happy","Info","GamesList","Game","GameInfo","viewDetails","setViewDetails","inputHandle","setInputHandle","loggedIn","sessionStorage","getItem","setUrl","lazyPGN","pgn","parsed","str","rav_regex","replace","RegExp","pop","load_pgn","fend","clean_move","stripped_san","matches","piece_type","infer_piece_type","an","charCodeAt","splitAN","fileVal","alg_to_hex","origin","determinePiece","result","enPassant","testSquare","testPieces","undefined","testPiece","archives","arch","yyyymm","games","game","white","username","black","player","name","placeholder","setItem","createGlobalStyle","Options","Option","Spacer","BoardOptions","setShowBlkCtrl","setShowWhtCtrl","Page","App","margin","GlobalStyles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEiBA,EAAgB,2DAGhBC,EAAc,CACvBC,EAAG,EAAE,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IACpCC,EAAG,EAAE,IAAK,GAAI,GAAI,IAClBC,EAAG,EAAE,GAAI,EAAG,IAAK,GACjBC,EAAG,EAAE,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,GACnCC,EAAG,EAAE,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAG1BC,EAAgB,CACzBJ,EAAG,CAAC,GAAI,IACRK,EAAG,EAAE,IAAK,KAGDC,EAAa,CACtBN,EAAG,CAAC,GAAI,IACRK,EAAG,EAAE,IAAK,KAKDE,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG5CC,EACH,EADGA,EAQ0D,I,OC0DrEC,EAAMC,IAAOC,MAAV,4KASMC,EApGI,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,OAAY,EAERC,mBAASF,GAFD,mBAE3BF,EAF2B,KAEpBK,EAFoB,KAI5BC,EAAa,CACf,MACA,QACA,QACA,WACA,UACA,OACA,MACA,QACA,SACA,WAGEC,EAAgB,CAAC,MAAO,UAAW,MAAO,QAAS,SAAU,OAE7DC,EAAc,SAACC,GAMjB,IAAIC,GAAW,EAITC,EAFYF,EAASG,MAAM,OAEV,GAAGA,MAAM,KAEZ,IAAhBD,EAAKE,SACLH,GAAW,GAGf,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAKE,OAAQC,IAAK,CAMlC,IAJA,IAAIC,EAAM,EACNC,GAAsB,EAGjBC,EAAI,EAAGA,EAAIN,EAAKG,GAAGD,OAAQI,IAC3BC,MAAMP,EAAKG,GAAGG,KAUV,mBAAmBE,KAAKR,EAAKG,GAAGG,MACjCP,GAAW,GAGfK,GAAO,EACPC,GAAsB,IAdlBA,IACAN,GAAW,GAGfK,GAAOK,SAAST,EAAKG,GAAGG,GAAI,IAC5BD,GAAsB,GAYlB,IAARD,IACAL,GAAW,GAInB,OAAOA,GAGX,OAAO,cAACZ,EAAD,CACPuB,KAAM,OACNC,MAAOd,EAAYR,GAASE,EAAMF,EAClCuB,SAAU,SAACC,GACHnB,EAASmB,EAAGC,OAAOH,OACnBd,EAAYgB,EAAGC,OAAOH,OACtBnB,EAAOqB,EAAGC,OAAOH,OACVhB,EAAWoB,SAASF,EAAGC,OAAOH,MAAO,IAC5CnB,EAAOlB,GACPoB,EAASpB,IACFsB,EAAcmB,SAASF,EAAGC,OAAOH,MAAO,GAC/CjB,EAASH,GACkB,UAApBsB,EAAGC,OAAOH,OAAyC,UAApBE,EAAGC,OAAOH,QAChDnB,EAAO,mBACPE,EAAS,wB,OC7EXsB,EAAS,SAACC,EAAOC,EAAOC,EAAQC,GACpB,MAAVF,EACArC,EAAcuC,GAAOC,SAAQ,SAACC,GAC1B,IAIO,EAJDC,EAAeJ,EAASG,EACX,IAAfC,IAMA,UAAAN,EAAMM,UAAN,SAAqBC,aAAaC,KAAK,CAACP,MAAOA,EAAOE,MAAOA,EAAOD,OAAQA,QAIpF5C,EAAY2C,GAAOG,SAAQ,SAACC,GAWxB,IAFA,IAAIC,EAAeJ,EAASG,IAEJ,IAAfC,IAAsB,CAAC,IAAD,IAI3B,GAFA,UAAAN,EAAMM,UAAN,SAAqBC,aAAaC,KAAK,CAACP,MAAOA,EAAOE,MAAOA,EAAOD,OAAQA,IAE9D,MAAVD,GAA2B,MAAVA,EAAe,MAEpC,GAAmC,QAA/B,UAAAD,EAAMM,UAAN,eAAqBL,OAErB,MAGJK,GAAgBD,OAOnBI,EAAU,SAACT,EAAOU,EAAcC,GAEzCD,EAAaN,SAAQ,SAACQ,GAClB,IAAMC,EAAYD,EAAKX,MAAMa,cACvBZ,EAASU,EAAKG,UAGpBhB,EAAOC,EAAOa,EAAWX,EAFX,QAKlBS,EAAaP,SAAQ,SAACQ,GAClB,IAAMC,EAAYD,EAAKX,MAAMa,cACvBZ,EAASU,EAAKG,UAGpBhB,EAAOC,EAAOa,EAAWX,EAFX,SCpDbc,EAAY,SAAC9B,GACtB,IAAI+B,EALK,SAAC/B,GACV,OAAW,GAAJA,EAICgC,CAAKhC,GACbzB,EAVS,SAACyB,GACV,OAAOA,GAAK,EASRiC,CAAKjC,GACT,MAAO,WAAWkC,UAAUH,EAAGA,EAAI,GAAK,WAAWG,UAAU3D,EAAGA,EAAI,ICXvD4D,EAAW,SAAC/C,GAYrB,IATA,IAAM0B,EAAQ,GAERU,EAAe,GACfC,EAAe,GAGrBW,EADQhD,EAAIU,MAAM,OACH,GACXkB,EAAS,EAEJhB,EAAI,EAAGA,EAAIoC,EAAOrC,OAAQC,IAAK,CACpC,IAAIe,EAAQqB,EAAOC,OAAOrC,GAE1B,GAAc,MAAVe,EAAe,CACfC,GAAU,EACV,IAAK,IAAIhB,EAAI,EAAGA,EAAI,EAAGA,IACnBc,EAAMQ,KAAK,WAEZ,IDAqB,IAA7B,aAAagB,QCAQvB,GAIhB,IADA,IAAMwB,EAAWjC,SAASS,EAAO,IACxBf,EAAI,EAAGA,EAAIuC,EAAUvC,IAC1Bc,EAAMQ,KAAK,CAEPkB,MAAOxB,EACPyB,MAAOX,EAAUd,GACjBD,MAAO,KACP2B,WAAY,KACZrB,aAAc,KAElBL,QAED,CAQH,IAAM2B,EAAY,CACV5B,MAAOA,EACPc,UAAWb,EACX4B,UAAWd,EAAUd,IAI7BD,EAAM8B,MAAM,SACVrB,EAAaF,KAAKqB,GAClBlB,EAAaH,KAAKqB,GAEpB7B,EAAMQ,KAAK,CAEPkB,MAAOxB,EACPyB,MAAOX,EAAUd,GACjBD,MAAOA,EAAMa,cACbc,WAAY3B,EAAM8B,MAAM,SAAU,IAAK,IACvCxB,aAAc,KAElBL,KAIR,MAAO,CAACF,QAAOU,eAAcC,iB,QCrExBqB,GAAa,SAAChC,EAAOiC,EAAMC,EAAIjC,EAAOE,EAAOgC,EAASC,EAAaC,GAI5E,IAAIC,EAGJ,GALAC,QAAQC,IAAIxC,EAAOiC,EAAMC,EAAIjC,EAAOE,EAAOgC,GAK3B,QAAZA,GAAiC,UAAZA,EAAqB,CAK1C,IAAMM,EAAgB,MAAVtC,EAAgB,IAAM,EAG5BuC,GAFoB,QAAZP,EAAoB,EAAI,IAEP,MAAVhC,EAAgB,IAAM,GAIrCwC,EAAQF,GAAmB,QAAZN,EAAoB,GAAK,GACxCS,EAAQF,GAAmB,QAAZP,GAAqB,EAAI,GAE9CnC,EAAMyC,GAAKxC,MAAQ,KACnBD,EAAMyC,GAAKb,WAAa,KAExB5B,EAAM0C,GAAKzC,MAAQ,KACnBD,EAAM0C,GAAKd,WAAa,KAExB5B,EAAM2C,GAAO1C,MAAQ,IACrBD,EAAM2C,GAAOf,WAAazB,EAE1BH,EAAM4C,GAAO3C,MAAQ,IACrBD,EAAM4C,GAAOhB,WAAazB,EAC1BmC,EAAsB,MAAVnC,EAAgB,IAAM,SAIlCH,EAAMiC,GAAMhC,MAAQ,KACpBD,EAAMiC,GAAML,WAAa,KAEzB5B,EAAMkC,GAAIjC,MAAQoC,GAAwBpC,EAC1CD,EAAMkC,GAAIN,WAAazB,EAEvBmC,EAAsB,MAAVnC,EAAgBF,EAAM4C,cAAgB5C,EAAMa,cAK5D,IAAMxC,EC/CY,SAAC0B,GAIrB,IAHA,IAAI8C,EAAQ,EACRxE,EAAM,GAEDY,EAAIjB,EAAYiB,GAAKjB,EAAYiB,IAAK,CAC3C,GAAsB,MAAlBc,EAAMd,GAAGe,MACb6C,QACO,CACHA,EAAQ,IACRxE,GAAOwE,EACPA,EAAQ,GAIZ,IAAM7C,EAAQD,EAAMd,GAAGe,MAGvB3B,GAAiB,MAFH0B,EAAMd,GAAG0C,WAEA3B,EAAM4C,cAAgB5C,EAAMa,cAG9C5B,EAAI,EAAK,MACV4D,EAAQ,IACRxE,GAAOwE,GAGP5D,IAAMjB,IACNK,GAAO,KAGXwE,EAAQ,EACR5D,GAAK,GAKT,OAAOZ,EDYOyE,CAAO/C,GACbgD,EAAU,sBAAQZ,EAAYa,SAApB,CAA6B,CAACC,IAAKf,EAASlC,MAAOqC,EAAWhE,IAAKA,KAGnF,OAFA8D,EAAYa,QAAUD,EAEf1E,GEkGL6E,GAAUhF,IAAOiF,IAAV,kIAMPC,GAAclF,IAAOiF,IAAV,iEAKXE,GAASnF,IAAOiF,IAAV,wRAcNG,GAAQpF,IAAOqF,IAAV,yMAULC,GAAQtF,IAAOiF,IAAV,2GAKLM,GAAOvF,IAAOiF,IAAV,8JASJO,GAAQxF,IAAOiF,IAAV,0HAMLQ,GAAOzF,IAAOiF,IAAV,4KASJS,GAAQ1F,IAAOiF,IAAV,iDAKIU,GApMG,SAAC,GAMR,IALPxF,EAKM,EALNA,IACAC,EAIM,EAJNA,OACA6D,EAGM,EAHNA,YACA2B,EAEM,EAFNA,YACAC,EACM,EADNA,YACM,EAE0BxF,qBAF1B,mBAECyF,EAFD,KAEWC,EAFX,KAIAC,EAAc,SAACvE,GAEjB,IAAMM,EAASF,EAAMJ,EAAGC,OAAOuE,IAE/B,GAAIH,EAAU,CACV,IAAMhE,EAAQgE,EAAShE,MACjBE,EAAQ8D,EAASrC,WACjBO,EAAUnB,EAAUpB,EAAGC,OAAOuE,IAEpC,GAAIH,EAASvC,QAAUlC,SAASI,EAAGC,OAAOuE,IAAK,CAC3C,IAAMpB,EAAahB,GAAWhC,EAAOiE,EAASvC,MAAO9B,EAAGC,OAAOuE,GAAInE,EAAOE,EAAOgC,EAASC,GAC1F7D,EAAOyE,GAEXkB,SAEAhE,EAAOD,MACLiE,EAAYhE,GACZgE,KArBJ,EA0BsC7C,EAAS/C,GAA9C0B,EA1BD,EA0BCA,MAAOU,EA1BR,EA0BQA,aAAcC,EA1BtB,EA0BsBA,aAK5B,OAHAF,EAAQT,EAAOU,EAAcC,GAIzB,eAAC0C,GAAD,WACA,eAACF,GAAD,WACI,cAACM,GAAD,UACK1F,EAAMsG,KAAI,SAAClD,GACR,OAAO,cAACuC,GAAD,UAAkBvC,GAAPA,QAGzBnD,EAAMqG,KAAI,SAACnD,EAAMoD,GACd,OAAO,cAACT,GAAD,CACPO,GAAIlD,EADG,SAEKnD,EAAMsG,KAAI,SAAClD,EAAMoD,GAIzB,IAAMH,EAAME,EAAW,GAAKC,EACtBC,EAAaP,EAAWA,EAASvC,OAAS,EAC1CxB,EAASF,EAAMoE,GACfnE,EAAQC,EAASA,EAAOD,MAAQ,EAChCE,EAAQD,EAASA,EAAO0B,WAAa,EACrCrB,EAAeL,EAASA,EAAOK,aAAe,GAE9CkE,EAAaxE,EAAQ,EAAI,IAGzByE,IAAaN,IAAOI,IACnBjE,EAAaoE,MAAK,SAACC,GAClB,OAAOC,OAAOC,OAAOF,GAAK9E,SAAS0E,EAAY,OAMjDO,EAAcxE,EAAayE,QAAO,SAAAC,GAAC,MAAgB,MAAZA,EAAE9E,SACzC+E,EAAe3E,EAAayE,QAAO,SAAAC,GAAC,MAAgB,MAAZA,EAAE9E,SAG1CgF,EAAQ,KAASJ,EAAY9F,OAAS+E,EAAgBkB,EAAajG,OAAS8E,GAAgBU,EAC5FW,EAAa,GAAML,EAAY9F,OAAS+E,EAAgBkB,EAAajG,OAAS8E,GAC9EsB,EAA+B,KAAX,OAAXN,QAAW,IAAXA,OAAA,EAAAA,EAAa9F,QAAgBwF,EAAaT,EACnDsB,EAA+B,KAAX,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcjG,QAAgBwF,EAAaV,EAWzD,OAAO,cAACT,GAAD,CACPc,GAAIA,EAEJmB,UACKjB,EAAS,IAAM,GAAKC,EAAS,IAAM,GAChCD,EAAS,IAAM,GAAKC,EAAS,IAAM,EACrC,QACA,QAPC,SASN,cAAChB,GAAD,CACOa,GAAIA,EACJoB,QAASrB,EACTsB,IAAKxF,EAAK,8BAA0BA,GAA1B,OAAkCE,EAAlC,qCACVoF,WACmB,IAAfb,EACE,WACA,OAENgB,MAAK,2BAAMvH,KAAN,IACD6G,OAAO,uBAAD,OAAyBI,EAAzB,mBAA8CE,EAA9C,gBAAyDD,EAAzD,YACNM,gBAAgB,QAAD,OAAUL,EAAV,aA7Bb,GA6Ba,aAA4BD,EAA5B,aAAqCF,EAArC,UAlBtBhE,OA1CJD,SAmET,cAACyC,GAAD,UACK3F,EAAMqG,KAAI,SAACnD,GACR,OAAO,cAAC0C,GAAD,UAAkB1C,GAAPA,YC5FhCiC,GAAUhF,IAAOiF,IAAV,yPAYPwC,GAAQzH,IAAOiF,IAAV,0DAILyC,GAAO1H,IAAO2H,KAAV,4GAOKC,GAvEK,SAAC,GAA2B,IAA1B3D,EAAyB,EAAzBA,YAAa7D,EAAY,EAAZA,OAsB/B,OACI,eAAC,GAAD,2BACI,cAACqH,GAAD,UACKxD,EAAYa,QAAQoB,KAAI,SAAChE,EAAM2F,GAC5B,IAAM9C,EAAM7C,EAAK6C,IACXjD,EAAQI,EAAKJ,MACb3B,EAAM+B,EAAK/B,IACX2H,EAhBH,2EAgB0B1E,OAjB9B,eAiB4CC,QAAQvB,IAE7CiG,EAASF,EAAQ,IAAO5D,EAAYa,QAAQhE,OAAS,GAAK,KAGhE,OAAO,eAAC4G,GAAD,CAEHL,QAAS,WACLjH,EAAOD,IAHR,UAIC2H,EAAW/C,EAAKgD,EANV,SAGLF,Y,6BC2CdG,GAjEE,SAACC,GAElB,IAAMC,EAAe,CACjBC,OAAQ,UACRC,MAAO,KACPC,KAAM,IALgB,EASAC,sBAAW,SAACC,EAAOC,GACzC,OAAQA,EAAOlH,MACX,IAAK,WAED,OAAO,2BAAK4G,GAAZ,IAA0BC,OAAQ,YACtC,IAAK,UAED,OAAO,2BAAKD,GAAZ,IAA0BC,OAAQ,OAAQE,KAAMG,EAAOC,UAC3D,IAAK,cAED,OAAO,2BAAKP,GAAZ,IAA0BC,OAAQ,QAASC,MAAOI,EAAOC,UAC7D,QACI,OAAOF,KAEhBL,GAvBuB,mBASnBK,EATmB,KASZG,EATY,KA2BhBC,EAAQC,iBAAO,IAkCrB,OAhCAC,qBAAU,WACN,IAAIC,GAAgB,EACpB,GAAKb,EAyBL,OAvBe,yCAAG,iCAAAc,EAAA,yDACdL,EAAS,CAAEpH,KAAM,cACbqH,EAAM7D,QAAQmD,GAFJ,gBAGV7D,QAAQC,IAAI,6BACNgE,EAAOM,EAAM7D,QAAQmD,GAC3BS,EAAS,CAACpH,KAAM,UAAWmH,QAASJ,IAL1B,iDASaW,MAAMf,GATnB,eASJgB,EATI,iBAUSA,EAASC,OAVlB,QAUJb,EAVI,OAWVM,EAAM7D,QAAQmD,GAAOI,EACrBK,EAAS,CAACpH,KAAM,UAAWmH,QAASJ,IAZ1B,sDAcFS,EAdE,mDAeNJ,EAAS,CAACpH,KAAM,cAAemH,QAAS,KAAMU,UAfxC,0DAAH,oDAoBfC,GAGO,WACHN,GAAgB,KAErB,CAACb,IAEG,CAACM,UCqTNc,GAAQrJ,IAAOsJ,OAAV,2CAGLC,GAASvJ,IAAOC,MAAV,kIAQNuJ,GAAUxJ,IAAOiF,IAAV,mIAQPwE,GAAOzJ,IAAOiF,IAAV,iIAQJyE,GAAQ1J,IAAOsJ,OAAV,qcAsBLK,GAAO3J,IAAOiF,IAAV,iRAaJ2E,GAAY5J,IAAOiF,IAAV,yLAST4E,GAAO7J,IAAOiF,IAAV,kGAMK6E,GApcE,SAAC,GAA2B,IAyQZ,MAzQd7F,EAAyB,EAAzBA,YAAa7D,EAAY,EAAZA,OAAY,EAEFC,mBAAS,YAFP,mBAEjC0J,EAFiC,KAEpBC,EAFoB,OAGF3J,mBAAS,IAHP,mBAGjC4J,EAHiC,KAGpBC,EAHoB,KAKlCC,EAAWC,eAAeC,QAAQ,eALA,EAOlBhK,mBAAS,mBAPS,mBAOjC4H,EAPiC,KAO5BqC,EAP4B,KASjC/B,EAASP,GAASC,GAAlBM,MAaDgC,EAAU,SAACC,GAKb,IAAIC,EAASD,EAAI3J,MAAM,QAQvB4J,EAASA,EAAQA,EAAO3J,OAAS,GAMjC,IADA,IPPiB4J,EOOXC,EAAY,oBACXA,EAAUvJ,KAAKqJ,IAClBA,EAASA,EAAOG,QAAQD,EAAW,IAyBvC,OAXAF,GAHAA,GAHAA,GAJAA,EAASA,EAAOG,QAAQ,qBAAsB,KAI9BA,QAAQ,gBAAiB,KAGzBA,QAAQ,UAAW,KAGnBA,QAAQ,SAAU,KAGlCH,GP1BiBC,EO0BHD,EPzBPC,EAAIE,QAAQ,aAAc,KOyBX/J,MAAM,IAAIgK,OAAO,SAGhCC,IAAIL,EAAO3J,QAKX2J,GA0DLM,EAAW,SAACP,GAGdvG,EAAYa,QAAU,GAHA,MAMoB5B,EAAShE,GAA9C2C,EANiB,EAMjBA,MAAOU,EANU,EAMVA,aAAcC,EANJ,EAMIA,aAE1BF,EAAQT,EAAOU,EAAcC,GAG7B,IAAIwI,EAAO9L,EAEXsL,EAAIvI,SAAQ,SAACC,EAAM2F,GAGf,IAAM7F,EAAQ6F,EAAQ,IAAM,EAAI,IAAM,IAGhCoD,EP1Gc,SAAC/I,GACzB,OAAOA,EAAK0I,QAAQ,IAAK,IAAIA,QAAQ,cAAe,IOyG7BM,CAAahJ,GAQ1BiJ,EAAUF,EAAWrH,MACvB,gEAGEwH,EAnFW,SAACrG,GACtB,IAAIqG,EAAarG,EAAI3B,OAAO,GAC5B,GAAIgI,GAAc,KAAOA,GAAc,IAAK,CAExC,GADcrG,EAAInB,MAAM,oBAExB,OAGA,MAAO,IAGX,MAAmB,OADnBwH,EAAaA,EAAWzI,eAEb,IAEJyI,EAqEgBC,CAAiBJ,GAEpC,GAAIE,EAAS,CACKA,EAAQ,GAAtB,IACMrH,EAAOqH,EAAQ,GACfpH,EAAKoH,EAAQ,GACbjH,EAAYiH,EAAQ,GAEpBzJ,EPhJQ,SAAC4J,GAEvB,IAAMvC,EAAI,IAAIwC,WAAW,GACnBC,EAAUF,EAAGzK,MAAM,IACnB4K,EAAUD,EAAQ,GAAGD,WAAW,GAAKxC,EAG3C,OAFiD,IAA/B,EAAK1H,SAASmK,EAAQ,KAEtBC,EOyIMC,CAAW3H,GAEzB4H,EAASC,EAAe/J,EAAOG,EAAOH,EAAMH,GAAS0J,EAAYtH,GAEvEkH,EAAOnH,GAAWhC,EAAO8J,EAAQjK,EAAQ0J,EAAYpJ,EAAOE,EAAM+B,EAAaC,GAE/ErC,EAAQqB,EAAS8H,GAAMnJ,MACvBU,EAAeW,EAAS8H,GAAMzI,aAC9BC,EAAeU,EAAS8H,GAAMxI,aAE9BF,EAAQT,EAAOU,EAAcC,OAIV,UAAfyI,GACkB,QAAfA,IAEHD,EAAOnH,GAAWhC,EAAO,KAAM,KAAM,KAAMG,EAAOiJ,EAAYhH,GAE9DpC,EAAQqB,EAAS8H,GAAMnJ,MACvBU,EAAeW,EAAS8H,GAAMzI,aAC9BC,EAAeU,EAAS8H,GAAMxI,aAE9BF,EAAQT,EAAOU,EAAcC,OAOzCpC,EAAO4K,IAMDY,EAAiB,SAAC/J,EAAOG,EAAON,EAAQ0J,EAAYtH,GAEtD,IAAI+H,EAEAC,GAAY,EAIhB,GAAmB,MAAfV,GAAuC,OAAjB1J,EAAOI,MAEZnC,EAAWqC,GAAOwE,MAAK,SAACtE,GACrC,IAAM6J,EAAarK,EAAO6B,MAAQrB,EAGlC,GAAgC,MAA5BL,EAAMkK,GAAYjK,OAAiBD,EAAMkK,GAAYtI,aAAezB,EAOpE,OADA6J,EAASE,EACFlK,EAAMkK,GAAYjK,QAAUsJ,GAAcvJ,EAAMkK,GAAYtI,aAAezB,EALlF8J,GAAY,EAEZjK,EAAMkK,GAAYjK,MAAQ,QAUtC,GAAmB,MAAfsJ,GAAsC,MAAfA,GAAuC,OAAjB1J,EAAOI,QAAiC,IAAdgK,EAAoB,CAG3F,IAAME,EAAatK,EAAOU,aAAayE,QAAO,SAAC/E,GAC3C,OAAQA,EAAMA,MAAMa,gBAAkByI,EAAWzI,eAAkBb,EAAME,QAAUA,KAKvF,GAAIgK,EAAWlL,OAAS,QAAcmL,IAATnI,EAAoB,CAC7C,IAAMoI,EAAYF,EAAWxF,MAAK,SAAC1E,GAC/B,OAAOe,EAAUf,EAAMC,QAAQJ,SAASmC,MAEhD+H,EAASK,EAAUnK,YAIf8J,EAASG,EAAW,GAAGjK,OAK/B,OAAO8J,GAeX,MAAqB,SAAjBtD,EAAMJ,OAKF,eAACwB,GAAD,WACI,eAACF,GAAD,WACA,cAACC,GAAD,CACAtC,UAA2B,YAAhB2C,EAA4B,WAAa,GACpD1C,QAAS,WAAO2C,EAAe,YAF/B,qBAIA,cAACN,GAAD,CACAtC,UAA2B,YAAhB2C,EAA4B,WAAa,GACpD1C,QAAS,WACL2C,EAAe,WAEXM,EADa,OAAbH,EACO,oCAAD,OAAqCA,EAArC,mBAEC,oBAPf,qBAWA,cAACT,GAAD,CACAtC,UAA2B,aAAhB2C,EAA6B,WAAa,GACrD1C,QAAS,WAELiD,EAAO,mBACPN,EAAe,aALnB,yBAWiB,YAAhBD,IAAA,UAA6BxB,EAAMF,YAAnC,aAA6B,EAAY8D,WAAY,cAACvC,GAAD,UACjDrB,EAAMF,KAAK8D,SAASjG,KAAI,SAACkG,EAAMvE,GAChC,IAAMwE,EAASD,EAAKxI,MAAM,aAC1B,OAAO,cAACiG,GAAD,CAEPxC,QACI,WACIiD,EAAO,oCAAD,OAAqCH,EAArC,kBAAuDkC,KAJ9D,SAQFA,GAPAxE,QAYQ,YAAhBkC,IAAA,UAA6BxB,EAAMF,YAAnC,aAA6B,EAAYiE,QAAS,cAAC1C,GAAD,UAClDrB,EAAMF,KAAKiE,MAAMpG,KAAI,SAACqG,EAAM1E,GACrB,OAAO,eAACgC,GAAD,CAEPxC,QACI,WAEI,IAAMmD,EAAMD,EAAQgC,EAAK/B,KACzBO,EAASP,IANV,UAUF+B,EAAKC,MAAMC,SAVT,OAUuBF,EAAKG,MAAMD,WATpC5E,SAcZ,UAAAU,EAAMF,YAAN,eAAYA,QAAyB,aAAhB0B,IAAgCI,GAA4B,YAAhBJ,IAA+B,cAACH,GAAD,UAChGrB,EAAMF,KAAKA,KAAKnC,KAAI,SAACyG,GAClB,OAAOA,EAAOL,MAAMpG,KAAI,SAACqG,EAAM1E,GAC3B,OAAO,eAACgC,GAAD,CAEPxC,QAAS,WAEL,IAAMmD,EAAMD,EAAQgC,GACpBxB,EAASP,IALN,UAOLmC,EAAOC,KAPF,SAOc/E,EAAQ,IANxBA,WAUI,YAAhBkC,GACD,eAACP,GAAD,WACI,cAACD,GAAD,CACAsD,YAAa,qBACbtL,MAAO0I,EACPzI,SAAU,SAACC,GACPyI,EAAezI,EAAGC,OAAOH,UAIzB,cAAC8H,GAAD,CACAhC,QAAS,WACL+C,eAAe0C,QAAQ,cAAe7C,GACtCK,EAAO,oCAAD,OAAqCL,EAArC,qBAHV,oBAMCE,QAKO,UAAjB5B,EAAMJ,OACN,cAACwB,GAAD,sDAEA,cAACA,GAAD,kCCzXAoD,eAAf,s8CCgBMC,GAAUhN,IAAOiF,IAAV,mMAUPgI,GAASjN,IAAOiF,IAAV,4BAENiI,GAASlN,IAAOiF,IAAV,2CAIGkI,GAhCM,SAAC,GAIG,IAHrBvH,EAGoB,EAHpBA,YACAC,EAEoB,EAFpBA,YACAuH,EACoB,EADpBA,eACAC,EAAoB,EAApBA,eAEA,OAAQ,mCACJ,eAACL,GAAD,WACI,eAACC,GAAD,6BAAuB,wBAAQ5F,QAAS,WAAO+F,EAA+B,IAAhBxH,EAAoB,EAAI,IAA/D,0BACvB,cAACsH,GAAD,IACA,eAACD,GAAD,8BAAwB,wBAAQ5F,QAAS,WAAOgG,EAA+B,IAAhBxH,EAAoB,EAAI,IAA/D,gCCqCpC,IAAMyH,GAAOtN,IAAOiF,IAAV,yLASJ0E,GAAO3J,IAAOiF,IAAV,yJASKsI,GAxDf,WAAgB,IAAD,EACSlN,mBAASnB,GADlB,mBACNiB,EADM,KACDC,EADC,KAEP6D,EAAc2E,iBAAO,IAFd,EAIyBvI,mBAAS,GAJlC,mBAINuF,EAJM,KAIOwH,EAJP,OAMyB/M,mBAAS,GANlC,mBAMNwF,EANM,KAMOwH,EANP,KASb,OACE,sBAAKjG,UAAU,MAAMG,MAAO,CAACC,gBAAiB,UAAWgG,OAAQ,KAAjE,UACE,cAACC,GAAD,IACA,eAACH,GAAD,WACE,cAAC,GAAD,CACAnN,IAAKA,EACLC,OAAQA,EACR6D,YAAaA,EACb2B,YAAaA,EACbC,YAAaA,IAGb,eAAC,GAAD,WACE,cAAC,GAAD,CAAUzF,OAAQA,EAAQ6D,YAAaA,IACvC,cAAC,EAAD,CAAa9D,IAAKA,EAAKC,OAAQA,IAC/B,cAAC,GAAD,CACAgN,eAAgBA,EAChBC,eAAgBA,EAChBzH,YAAaA,EACbC,YAAaA,IAEb,cAAC,GAAD,CAAa5B,YAAaA,EAAa7D,OAAQA,cC7B1CsN,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.1821d828.chunk.js","sourcesContent":["\r\n\r\n    export const startingPosition = `rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1`;\r\n\r\n    //0x88\r\n    export const piece_moves = {\r\n        n: [-18, -33, -31, -14, 18, 33, 31, 14],\r\n        b: [-17, -15, 17, 15],\r\n        r: [-16, 1, 16, -1],\r\n        q: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n        k: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n    }\r\n\r\n    export const pawn_captures = {\r\n        b: [17, 15],\r\n        w: [-17, -15],\r\n    }\r\n    \r\n    export const pawn_moves = {\r\n        b: [16, 32],\r\n        w: [-16, -32],\r\n    }\r\n    \r\n    \r\n\r\n    export const ranks = [8, 7, 6, 5, 4, 3, 2, 1]\r\n    export const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\r\n\r\n    // table of valid board squares in 0x88 format \r\n    export const SQUARES = {\r\n        a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n        a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n        a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n        a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n        a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n        a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n        a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n        a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n\r\n    // obj template - example \r\n    const squareInfo = {\r\n        algebraicId: 'a1', // square's ID in algebraic notation, e.g. a1, f3, h8\r\n        hexId: 0,   // ID in 0x88 board representation, e.g. 0-7, 16-23, 32-39...\r\n        piece: 'empty', // current piece on this square \r\n        pieceColor: 'empty',    // current piece's color - maybe unnecessary, implicit piece color W vs b\r\n        controlledBy: [],   // array of all pieces that attack, defend, or control this square \r\n    }\r\n    //","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { startingPosition } from \"../Constants/constants\";\r\n\r\nconst DisplayFEN = ({fen, setFen}) => {\r\n\r\n    const [input, setInput] = useState(fen);\r\n\r\n    const boardInits = [\r\n        \"new\",\r\n        \"start\",\r\n        \"chess\",\r\n        \"standard\",\r\n        \"default\",\r\n        \"init\",\r\n        \"new\",\r\n        \"reset\",\r\n        \"normal\",\r\n        \"regular\"\r\n        ]\r\n\r\n    const boardCurrents = [\"now\", \"current\", \"cur\", \"board\", \"update\", \"get\"]\r\n\r\n    const validateFEN = (fenCheck) => {\r\n                \r\n        // do some basic checks on our input string\r\n        // to see if user is trying to generate their own FEN board layout\r\n\r\n        //default to true\r\n        let validate = true;\r\n\r\n        const fenTokens = fenCheck.split(/\\s+/)\r\n\r\n        const rows = fenTokens[0].split('/')\r\n\r\n        if (rows.length !== 8) {\r\n            validate = false;\r\n        }\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            // make sure it always adds up to 64, without invalid integers (e.g. 26 instead of 8)\r\n            let sum = 0\r\n            let previous_was_number = false \r\n\r\n            // processing each row \r\n            for (let j = 0; j < rows[i].length; j++) {\r\n                if (!isNaN(rows[i][j])) {\r\n                    if (previous_was_number) {\r\n                        validate = false;\r\n                    }\r\n\r\n                    sum += parseInt(rows[i][j], 10)\r\n                    previous_was_number = true;\r\n\r\n                } else {\r\n\r\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][j])) {\r\n                        validate = false;\r\n                    }\r\n\r\n                    sum += 1;\r\n                    previous_was_number = false;\r\n                }\r\n            }\r\n            if (sum !== 8) {\r\n                validate = false;\r\n            }\r\n        }\r\n\r\n        return validate;\r\n    }\r\n\r\n    return <Fen \r\n    type={'text'}\r\n    value={validateFEN(input) ? fen : input}\r\n    onChange={(ev) => {\r\n            setInput(ev.target.value);\r\n        if (validateFEN(ev.target.value)) {\r\n            setFen(ev.target.value);\r\n        } else if (boardInits.includes(ev.target.value, 0)) {\r\n            setFen(startingPosition);\r\n            setInput(startingPosition);\r\n        } else if (boardCurrents.includes(ev.target.value, 0)) {\r\n            setInput(fen);\r\n        } else if (ev.target.value === 'blank' || ev.target.value === 'empty') {\r\n            setFen(\"8/8/8/8/8/8/8/8\")\r\n            setInput(\"8/8/8/8/8/8/8/8\");\r\n        }\r\n\r\n        }\r\n    }\r\n    />\r\n\r\n}\r\n\r\nconst Fen = styled.input`\r\n    margin-top: 20px;\r\n    width: 25vw;\r\n    min-width: 200px;\r\n    border: 1px solid gray;\r\n    border-radius: 10px;\r\n    padding: 10px 20px;\r\n`\r\n\r\nexport default DisplayFEN;\r\n","\r\nimport {  \r\n    piece_moves, \r\n    pawn_captures\r\n    } from \"../Constants/constants\";\r\n\r\n    // calculate the Attacked, Defended, and Controlled squares of a given piece\r\n    // this has to be done after the full board is rendered and all piece positions are placed\r\n    // square refers to decimal ID for now\r\n    const setADC = (board, piece, square, color) => {\r\n        if (piece === 'p') {\r\n            pawn_captures[color].forEach((move) => {\r\n                const targetSquare = square + move;\r\n                if (targetSquare & 0x88) {\r\n                    //console.log(targetSquare)\r\n                    return;\r\n                } else {\r\n                    //console.log(board[targetSquare])\r\n\r\n                    board[targetSquare]?.controlledBy.push({piece: piece, color: color, square: square})\r\n                }\r\n            })\r\n        } else {\r\n            piece_moves[piece].forEach((move) => {\r\n\r\n                // for non-pawn pieces \r\n                // set a target square according to move offset \r\n                // if king or knight, break\r\n                // for bishop, rook, queen (sliding pieces):\r\n                // while targetSquare.piece === null\r\n                // set controlled and += offset \r\n                // break when hits invalid or occupied square\r\n                let targetSquare = square + move;\r\n\r\n                while (!(targetSquare & 0x88)) {\r\n                    //console.log('Target:', targetSquare, 'Piece:', piece)\r\n                    board[targetSquare]?.controlledBy.push({piece: piece, color: color, square: square})\r\n                    //stop immediately for kings and knights \r\n                    if (piece === 'n' || piece === 'k') break;\r\n\r\n                    if (board[targetSquare]?.piece !== null) {\r\n                        //console.log('Break!', 'piece:', piece)\r\n                        break};\r\n\r\n                    //bishops, rooks, queens do the calculation again\r\n                    targetSquare += move;\r\n                }\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    export const initADC = (board, white_pieces, black_pieces) => {\r\n        //console.log('ADC init')\r\n        white_pieces.forEach((info) => {\r\n            const pieceType = info.piece.toLowerCase();\r\n            const square = info.squareHex;\r\n            const color = 'w'\r\n\r\n            setADC(board, pieceType, square, color)\r\n        })\r\n\r\n        black_pieces.forEach((info) => {\r\n            const pieceType = info.piece.toLowerCase();\r\n            const square = info.squareHex;\r\n            const color = 'b'\r\n\r\n            setADC(board, pieceType, square, color)\r\n        })\r\n    }\r\n\r\n","\r\n/*****************************************************************************\r\n   * UTILITY FUNCTIONS\r\n   ****************************************************************************/\r\n    \r\nconst rank = (i) => {\r\n    return i >> 4\r\n}\r\n\r\nconst file = (i) => {\r\n    return i & 15\r\n}\r\n\r\nexport const algebraic = (i) => {\r\n    var f = file(i),\r\n    r = rank(i)\r\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\r\n}\r\n\r\nconst swap_color = (c) => {\r\n    return c === 'w' ? 'b' : 'w'\r\n}\r\n\r\n// util function to determine if string is a number\r\nexport const is_digit = (d) => {\r\n    return '0123456789'.indexOf(d) !== -1\r\n}\r\n\r\n\r\n    // alg square to 0x88\r\n    export const alg_to_hex = (an) => {\r\n        // always returns two strings: file, rank\r\n        const a = \"a\".charCodeAt(0)\r\n        const splitAN = an.split(\"\")\r\n        const fileVal = splitAN[0].charCodeAt(0) - a\r\n        const rankVal = ( 8 - (parseInt(splitAN[1])) ) * 16\r\n\r\n        return (rankVal + fileVal)\r\n\r\n            \r\n\r\n    }\r\n    //trim whitespace around string\r\n    export const trim = (str) => {\r\n        return str.replace(/^\\s+|\\s+$/g, '')\r\n    }\r\n\r\n    // parses all of the decorators out of a SAN string\r\n    export const stripped_san = (move) => {\r\n        return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\r\n    }","\r\n    // this function takes a FEN string as input and fills the board array with values for the initial render\r\n\r\nimport { algebraic, is_digit } from \"./utils\";\r\n\r\n    export const fenBoard = (fen) => {\r\n\r\n\r\n        const board = [];\r\n\r\n        const white_pieces = [];\r\n        const black_pieces = [];\r\n\r\n\t\tconst items = fen.split(/\\s+/); // split the FEN pieces from other info\r\n\t\tconst pieces = items[0];  // idgaf about anything but the pieces\r\n        let square = 0\r\n    \r\n        for (var i = 0; i < pieces.length; i++) {\r\n            var piece = pieces.charAt(i)\r\n            //console.log('FEN cur piece:', piece)\r\n            if (piece === '/') {\r\n                square += 8\r\n                for (let i = 0; i < 8; i++) {\r\n                    board.push(null)\r\n                }\r\n            } else if (is_digit(piece)) {\r\n                // empty squares\r\n                // is a number = create blank spaces\r\n                const numEmpty = parseInt(piece, 10)\r\n                for (let i = 0; i < numEmpty; i++) {\r\n                    board.push({\r\n                        //algebraicId: Object.keys(SQUARES)[square],\r\n                        hexId: square,\r\n                        algId: algebraic(square),\r\n                        piece: null,\r\n                        pieceColor: null,\r\n                        controlledBy: []\r\n                    })\r\n                    square ++\r\n                }\r\n            } else {\r\n                // pieces on a square\r\n                // if a piece is present on a square\r\n                // add that info to the square's Object\r\n                // then calculate the ADC info for that piece\r\n                // finally update the controlledBy array for those pieces\r\n                // this is where our calculations might get stupidly expensive\r\n                \r\n                const pieceInfo = {\r\n                        piece: piece,\r\n                        squareHex: square,\r\n                        squareAlg: algebraic(square)\r\n\r\n                    }\r\n\r\n                piece.match(/[A-Z]/)\r\n                ? white_pieces.push(pieceInfo)\r\n                : black_pieces.push(pieceInfo)\r\n\r\n                board.push({\r\n                    //algebraicId: Object.keys(SQUARES)[square],\r\n                    hexId: square,\r\n                    algId: algebraic(square),\r\n                    piece: piece.toLowerCase(),\r\n                    pieceColor: piece.match(/[A-Z]/)? 'w': 'b',\r\n                    controlledBy: []\r\n                })\r\n                square++\r\n            }\r\n        }\r\n\r\n        return {board, white_pieces, black_pieces}\r\n    }\r\n","import { fenGen } from \"./fenGen\";\r\n\r\nexport const submitMove = (board, from, to, piece, color, moveSAN, moveHistory, promotion) => {\r\n    \r\n    console.log(board, from, to, piece, color, moveSAN)\r\n    \r\n    let pieceCase;\r\n\r\n    // handle castling manually \r\n    if (moveSAN === 'O-O' || moveSAN === 'O-O-O') {\r\n        // short: move king to G file, rook to F\r\n        // k: 4 r: 7 | K: 116 R: 119\r\n        // long: move king to C file, rook to D file\r\n        // k: 4 r: 0 | K: 116 R: 112\r\n        const ksq = color === 'w' ? 116 : 4\r\n        const rside = moveSAN === 'O-O' ? 7 : 0\r\n\r\n        const rsq = rside + (color === 'w' ? 112 : 0)\r\n\r\n        //short: k: 6 r: 5 | K: 118 R: 117\r\n        //long:  k: 2 r: 3 | K: 114 R: 115\r\n        const kDest = ksq + (moveSAN === 'O-O' ? 2 : -2)\r\n        const rDest = rsq + (moveSAN === 'O-O' ? -2 : 3)\r\n\r\n        board[ksq].piece = null;\r\n        board[ksq].pieceColor = null;\r\n\r\n        board[rsq].piece = null;\r\n        board[rsq].pieceColor = null;\r\n        \r\n        board[kDest].piece = 'k';\r\n        board[kDest].pieceColor = color;\r\n\r\n        board[rDest].piece = 'r';\r\n        board[rDest].pieceColor = color;\r\n        pieceCase = color === 'w' ? 'K' : 'k'\r\n\r\n    } else {\r\n\r\n        board[from].piece = null;\r\n        board[from].pieceColor = null;\r\n\r\n        board[to].piece = promotion ? promotion : piece;\r\n        board[to].pieceColor = color;\r\n\r\n        pieceCase = color === 'w' ? piece.toUpperCase() : piece.toLowerCase()\r\n\r\n    }\r\n\r\n\r\n    const fen = fenGen(board)\r\n    const newHistory = ([...moveHistory.current, {san: moveSAN, piece: pieceCase, fen: fen}])\r\n    moveHistory.current = newHistory\r\n    \r\n    return fen\r\n}","import { SQUARES } from \"../Constants/constants\"\r\n\r\n\r\nexport const fenGen = (board) => {\r\n  let empty = 0\r\n  let fen = ''\r\n\r\n  for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n      if (board[i].piece == null) {\r\n      empty++\r\n      } else {\r\n      if (empty > 0) {\r\n          fen += empty\r\n          empty = 0\r\n      }\r\n\r\n      \r\n      const piece = board[i].piece\r\n      const color = board[i].pieceColor\r\n\r\n      fen += color === 'w' ? piece.toUpperCase() : piece.toLowerCase()\r\n      }\r\n\r\n      if ((i + 1) & 0x88) {\r\n      if (empty > 0) {\r\n          fen += empty\r\n      }\r\n\r\n      if (i !== SQUARES.h1) {\r\n          fen += '/'\r\n      }\r\n\r\n      empty = 0\r\n      i += 8\r\n      }\r\n  }\r\n\r\n  //console.log(fen)\r\n  return fen\r\n}\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {  \r\n    ranks, \r\n    files, } from \"../Constants/constants\";\r\nimport { initADC } from \"../Functions/ADC\";\r\nimport { fenBoard } from \"../Functions/fenBoard\";\r\nimport { submitMove } from \"../Functions/submitMove\";\r\nimport { algebraic } from \"../Functions/utils\";\r\n\r\n\r\n//import { parsePGN, loadPGN, move_from_san } from \"../Functions/parsePGN\";\r\n\r\n//rendering the basic game board \r\n\r\n//FEN setup:\r\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\r\n\r\n// r = rookb R = rookw\r\n// n = knightb N = knightw\r\n// b = bishopb B = bishopw\r\n// q = queenb Q = queenw\r\n// k = kingb K = kingw\r\n// p = pawnb P = pawnw\r\n\r\nconst GameBoard = ({\r\n    fen, \r\n    setFen, \r\n    moveHistory,    \r\n    showBlkCtrl,\r\n    showWhtCtrl\r\n    }) => {\r\n\r\n    const [selected, setSelected] = useState();\r\n\r\n    const clickSquare = (ev) => {\r\n        //prints the info stored in the clicked square\r\n        const square = board[ev.target.id]\r\n\r\n        if (selected) {\r\n            const piece = selected.piece;\r\n            const color = selected.pieceColor;\r\n            const moveSAN = algebraic(ev.target.id)\r\n            \r\n            if (selected.hexId !== parseInt(ev.target.id)) {\r\n                const newHistory = submitMove(board, selected.hexId, ev.target.id, piece, color, moveSAN, moveHistory)\r\n                setFen(newHistory);\r\n            }\r\n            setSelected();\r\n            } else {\r\n            square.piece \r\n            ? setSelected(square)\r\n            : setSelected()\r\n            }\r\n    }\r\n\r\n    // load and reload board\r\n    const {board, white_pieces, black_pieces} = fenBoard(fen)\r\n\r\n    initADC(board, white_pieces, black_pieces);\r\n\r\n    \r\n    return (\r\n        <InfoWrapper>\r\n        <Wrapper>\r\n            <Ranks>\r\n                {ranks.map((rank) => {\r\n                    return <Rank key={rank}>{rank}</Rank>\r\n                })}\r\n            </Ranks>\r\n            {files.map((file, findex) => {\r\n                return <Board \r\n                id={file}\r\n                key={file}>{ranks.map((rank, rindex) => {\r\n\r\n                    // 1 render sets the entire board including tiles and pieces\r\n                    // helper constants are set conditionally so we can display an empty board\r\n                    const id = (findex) + (16 * rindex)\r\n                    const selectedId = selected ? selected.hexId : -1;\r\n                    const square = board[id]\r\n                    const piece = square ? square.piece : 0;\r\n                    const color = square ? square.pieceColor : 0;\r\n                    const controlledBy = square ? square.controlledBy : [];\r\n                    // occupied squares are brighter\r\n                    const multiplier = piece ? 1 : 0.75;\r\n\r\n                    \r\n                    const isSelected = id === selectedId \r\n                        || controlledBy.find((obj) => {\r\n                            return Object.values(obj).includes(selectedId, 0)\r\n                                //&& !(Object.values(obj).includes('p', 0))\r\n                            })\r\n                         ? true : false;\r\n                    //\r\n\r\n                    const allyControl = controlledBy.filter(x => x.color === 'w')\r\n                    const enemyControl = controlledBy.filter(x => x.color === 'b')\r\n\r\n                    \r\n                    const alpha = 0.15 * ((allyControl.length * showWhtCtrl) + (enemyControl.length * showBlkCtrl)) * multiplier;\r\n                    const importance = 5 * ((allyControl.length * showWhtCtrl) + (enemyControl.length * showBlkCtrl));\r\n                    const blue = ((allyControl?.length * 100) * multiplier * showWhtCtrl);\r\n                    const red = ((enemyControl?.length * 100) * multiplier * showBlkCtrl);\r\n                    // green value is set only for uncontested squares \r\n                    const green = 35;\r\n                        // controlledBy \r\n                        // && square.piece === null\r\n                        // && (allyControl.length === 0 \r\n                        //     || enemyControl.length === 0) \r\n                        //     ? 75 * controlledBy.length \r\n                        //     : 0;\r\n\r\n\r\n                    return <Square \r\n                    id={id}\r\n                    key={rank}\r\n                    className={\r\n                        (findex % 2 === 0 && rindex % 2 === 0)\r\n                        || (findex % 2 !== 0 && rindex % 2 !== 0)\r\n                        ? 'white'\r\n                        : 'black'\r\n                    }\r\n                    ><Piece\r\n                            id={id}\r\n                            onClick={clickSquare}\r\n                            src={piece ? `./assets/pieceslisa/${piece}${color}.png` : `./assets/pieceslisa/em.png`}\r\n                            className={\r\n                                isSelected === true\r\n                                ? 'selected'\r\n                                : 'none'\r\n                            }   \r\n                            style={{...styled,\r\n                                filter: `drop-shadow(0px 0px ${importance}px rgba(${red}, 0, ${blue}, 0.75))`,\r\n                                backgroundColor: `rgba(${red}, ${green}, ${blue}, ${alpha})`\r\n                            }}\r\n                            />\r\n                    </Square>\r\n                })}</Board>\r\n            })}\r\n        </Wrapper>\r\n            <Files>\r\n                {files.map((file) => {\r\n                    return <File key={file}>{file}</File>\r\n                })}\r\n            </Files>\r\n        </InfoWrapper>\r\n    )\r\n}\r\n\r\n//temp\r\n//\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\nconst InfoWrapper = styled.div`\r\n    width: 60vw;\r\n    height: 98vh;\r\n`\r\n\r\nconst Square = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 1px solid gray;\r\n    background-color: #181A1B;\r\n    &.black{\r\n        //disabled\r\n        //background-color: #111;\r\n    }\r\n`\r\n\r\nconst Piece = styled.img`\r\n    position: absolute;\r\n    width: inherit;\r\n    height: inherit;\r\n    &.selected{\r\n        \r\n        box-shadow: 0 0 10px 0 yellow;\r\n        //border-radius: 50%;\r\n    }\r\n`\r\nconst Ranks = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`\r\nconst Rank = styled.div`\r\n    text-align: center;\r\n    align-items: center;\r\n    height: 100px;\r\n    width: 20px;\r\n    position: relative;\r\n    top: 50px;\r\n`\r\n\r\nconst Files = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 60vw;\r\n    justify-content: center;\r\n`\r\nconst File = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100px;\r\n    height: 20px;\r\n    position: relative;\r\n    left: 5px;\r\n    top: 5px;\r\n`\r\nconst Board = styled.div`\r\nmargin-top: 20px;\r\n\r\n`\r\n\r\nexport default GameBoard;","import styled from \"styled-components\";\r\n\r\nconst MoveHistory = ({moveHistory, setFen}) => {\r\n\r\n    // console.log(\r\n    //     \"b:\", \"b\".charCodeAt(0), //98\r\n    //     \"k:\", \"k\".charCodeAt(0), //107\r\n    //     \"n:\", \"n\".charCodeAt(0), //110\r\n    //     \"p:\", \"p\".charCodeAt(0), //112\r\n    //     \"q:\", \"q\".charCodeAt(0), //113\r\n    //     \"r:\", \"r\".charCodeAt(0), //114\r\n    // )\r\n    \r\n    // alphabetical order: bishop, king, (k)night, pawn, queen, rook\r\n    const pieces = \"bknpqrBKNPQR\";\r\n    const pieceChars = \"♗♔♘♙♕♖♝♚♞♟♛♜\"\r\n\r\n    // chess piece characters \r\n    // ♜\t♞\t♝\t♛\t♚\t♝\t♞\t♜\r\n    // ♟\t♟\t♟\t♟\t♟\t♟\t♟\t♟\r\n\r\n    // ♙\t♙\t♙\t♙\t♙\t♙\t♙\t♙\r\n    // ♖\t♘\t♗\t♕\t♔\t♗\t♘\t♖\r\n\r\n    return (\r\n        <Wrapper>Move History:\r\n            <Moves>\r\n                {moveHistory.current.map((move, index) => {\r\n                    const san = move.san\r\n                    const piece = move.piece\r\n                    const fen = move.fen\r\n                    const pieceChar = pieceChars.charAt(pieces.indexOf(piece));\r\n\r\n                    const comma = (index + 1) === moveHistory.current.length ? '' : \", \"\r\n                    const space = \"\\u00A0\";\r\n\r\n                    return <Move \r\n                        key={index}\r\n                        onClick={() => {\r\n                            setFen(fen)\r\n                        }}>{pieceChar}{san}{comma}{space}</Move>\r\n                })}\r\n            </Moves>\r\n        </Wrapper>\r\n\r\n\r\n    )\r\n    \r\n}\r\n\r\nconst Wrapper = styled.div`\r\npadding: 20px 40px;\r\n    margin-top: 20px;\r\n    border: 2px solid whitesmoke;\r\n    width: 25vw;\r\n    height: auto;\r\n    min-width: 100px;\r\n    min-height: 200px;\r\n    text-align: center;\r\n    text-decoration: underline;\r\n`\r\n\r\nconst Moves = styled.div`\r\n    text-decoration: none;\r\n\r\n`\r\nconst Move = styled.span`\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n\r\n`\r\n\r\nexport default MoveHistory;\r\n\r\n\r\n\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\n\r\n    //~~~\"Stop trying to make fetch happen\"~~~\r\n\r\n\r\n// the useFetch hook uses a UseEffect + reducer\r\n// in your React component, call {state} = useFetch('/api-url')\r\n// the {state} will contain a Status (loading/done/error) and the Data that was fetched\r\n// it also stores the output in a cached array, so calling the same api-url\r\n// will not need to send a request to the server, unless the data has changed\r\n\r\n// Note that fetch will also return Data, so to access you will need to use state.data.data \r\n// I recommend using state.status for the Loading/Done/Error check, then assigning a variable:\r\n// {data} = state.data\r\n\r\nconst useFetch = (url) => {\r\n\r\nconst initialState = {\r\n    status: 'loading',\r\n    error: null,\r\n    data: [],\r\n};\r\n\r\n\r\nconst [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n        case 'FETCHING':\r\n            \r\n            return { ...initialState, status: 'loading' };\r\n        case 'FETCHED':\r\n            \r\n            return { ...initialState, status: 'done', data: action.payload };\r\n        case 'FETCH_ERROR':\r\n            \r\n            return { ...initialState, status: 'error', error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}, initialState);\r\n\r\n    \r\n    \r\n    const cache = useRef({});\r\n\r\n    useEffect(() => {\r\n        let cancelRequest = false;\r\n        if (!url) return;   //do nothing in case of no url \r\n\r\n        const fetchData = async () => {\r\n            dispatch({ type: 'FETCHING' });\r\n            if (cache.current[url]) {\r\n                console.log(\"fetching cached datatata!\")\r\n                const data = cache.current[url];\r\n                dispatch({type: 'FETCHED', payload: data})\r\n            } else {\r\n                try {\r\n                    \r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                cache.current[url] = data; // sets the data in a cache array using useRef\r\n                dispatch({type: 'FETCHED', payload: data})\r\n                } catch (error) {\r\n                    if (cancelRequest) return;\r\n                    dispatch({type: 'FETCH_ERROR', payload: error.message})\r\n                }\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n\r\n        //cleanup function\r\n        return function cleanup() {\r\n            cancelRequest = true;\r\n        };\r\n    }, [url]);\r\n    \r\n    return {state}\r\n}\r\n\r\n\r\nexport default useFetch;","import useFetch from \"../CustomHooks/useFetch\";\r\nimport styled from \"styled-components\";\r\nimport { submitMove } from \"../Functions/submitMove\";\r\nimport { fenBoard } from \"../Functions/fenBoard\";\r\nimport { pawn_moves, startingPosition } from \"../Constants/constants\";\r\nimport { initADC } from \"../Functions/ADC\";\r\nimport { algebraic, alg_to_hex, stripped_san, trim } from \"../Functions/utils\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst GameInfo = ({moveHistory, setFen}) => {\r\n\r\n    const [viewDetails, setViewDetails] = useState('examples')\r\n    const [inputHandle, setInputHandle] = useState('')\r\n\r\n    const loggedIn = sessionStorage.getItem(\"currentUser\") \r\n    \r\n    const [url, setUrl] = useState('/api/db/players')\r\n\r\n    const {state} = useFetch(url)\r\n\r\n    //const {state} = useFetch(`https://api.chess.com/pub/player/connordontknowme/games/2021/10`)\r\n\r\n    // temp disable\r\n    // const state = {status: 'done'}\r\n\r\n\r\n    // This is a PGN parser built to handle nice,\r\n    // logically laid-out PGNs. Maybe there can be bugs\r\n    // with non-standard notations, or notation errors\r\n    // \"Regex, I love you, but you're bringing me down...\"\r\n\r\n    const lazyPGN = (pgn) => {    \r\n\r\n        //const terminations = ['1-0', '0-1', '1/2-1/2', '*']\r\n  \r\n        // split headers and moves\r\n        let parsed = pgn.split(/\\n\\n/);\r\n    \r\n\r\n        // I can use some of the headers info maybe\r\n        //const headers = parsed[0]\r\n        //console.log(parsed[0])\r\n\r\n        //only moves etc\r\n        parsed = parsed[(parsed.length - 1)]\r\n\r\n        /* delete recursive annotation variations */\r\n        // whoever thought it was a good idea to nest PGN comments...\r\n        // with alternate move lines... with nested comments... with alternate move lines...\r\n        const rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(parsed)) {\r\n            parsed = parsed.replace(rav_regex, '')\r\n        }\r\n\r\n        // delete comments from move info\r\n        parsed = parsed.replace(/{(.*?)}|\\((.*?)\\)/g, '')\r\n        \r\n\r\n        // deleting move numbers \r\n        parsed = parsed.replace(/\\d+\\.(\\.\\.)?/g, '')\r\n\r\n        // delete ... indicating black to move \r\n        parsed = parsed.replace(/\\.\\.\\./g, '')\r\n    \r\n        // deleting numeric annotation glyphs \r\n        parsed = parsed.replace(/\\$\\d+/g, '')\r\n\r\n        /* trim and get array of moves */\r\n        parsed = trim(parsed).split(new RegExp(/\\s+/))\r\n\r\n        // remove ending result\r\n        parsed.pop(parsed.length)\r\n\r\n\r\n        //load_pgn(parsed);\r\n\r\n        return parsed;\r\n\r\n    }\r\n\r\n\r\n    \r\n    const infer_piece_type = (san) => {\r\n        var piece_type = san.charAt(0)\r\n        if (piece_type >= 'a' && piece_type <= 'h') {\r\n            var matches = san.match(/[a-h]\\d.*[a-h]\\d/)\r\n            if (matches) {\r\n            return undefined\r\n            }\r\n            \r\n            return 'p'\r\n        }\r\n        piece_type = piece_type.toLowerCase()\r\n        if (piece_type === 'o') {\r\n            return 'k'\r\n        }\r\n        return piece_type\r\n    }\r\n    \r\n    // this takes a lazy-parsed PGN string and recreates all the moves\r\n    // pushing them into 'history'\r\n\r\n    // functionality:\r\n    // assume white to start (I don't think I need to handle exceptions for this)\r\n    // get last 2 letters for each string (\"to\" square)\r\n    // then we need to parse the remainder:\r\n    // blank === pawn move... we need to grab the right colour pawn,\r\n    // check first for 1sq then 2sq in appropriate colour side (in case doubled pawns)\r\n\r\n    // if capital letter is first, get pieces of type per turn colour \r\n    // then if there are multiples of a piece we need to check valid move \r\n    // if we get multiple matches we need to check for disambiguation, \r\n    // get file or rank of origin from string\r\n    // if this information is missing, I guess just take whichever and \r\n    // blame the bad notation... calculating ahead to infer is overkill!\r\n\r\n    // if the \"to:\" square is occupied, the piece will be removed\r\n    // so capture notation can be ignored in the process but still included\r\n\r\n    // make sure that checks + and checkmates # are ignored in the move parse\r\n    // but still appear in the history notation\r\n\r\n    // when the move is castling, we process 2 moves (king and rook) but only\r\n    // submit 1 event to history, with proper notation (O-O or O-O-O)\r\n\r\n    // if a pawn is taken en-passant the notation can be dicey or ambiguous\r\n    // try to handle this -- but it is the least common move in chess\r\n    // if \"to\" square is unoccupied, but takes is specified ('x'), and piece is pawn\r\n    // check 1sq \"up\" and if it's a pawn, assume an EP capture\r\n    // if notation specifies e.p. above should handle, but parser will need to ignore\r\n\r\n    // finally, we should specify the piece in our notation using the chesspiece symbols\r\n\r\n    //accepts an array of individual moves in PGN notation \r\n    const load_pgn = (pgn) => {\r\n\r\n        // clear history when starting load \r\n        moveHistory.current = []\r\n\r\n        // init board\r\n        let {board, white_pieces, black_pieces} = fenBoard(startingPosition)\r\n\r\n        initADC(board, white_pieces, black_pieces);\r\n\r\n        // this gets updated per-move\r\n        let fend = startingPosition;\r\n\r\n        pgn.forEach((move, index) => {\r\n\r\n            // get the color of move (white/black)\r\n            const color = index % 2 === 0 ? 'w' : 'b'\r\n\r\n            //remove unnecessary symbols for calculation\r\n            const clean_move = stripped_san(move)\r\n\r\n            //console.log(\"Move:\", move, \"Clean Move:\", clean_move, \"Turn:\", color)\r\n\r\n            // get \"to\" square: last digit in string, preceded by a letter \r\n            //const targetSquare = move.match(/[a-h][1-8]/);\r\n\r\n            // new stacked regex, nice \r\n            const matches = clean_move.match(\r\n                /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\r\n            )\r\n\r\n            const piece_type = infer_piece_type(clean_move);\r\n\r\n            if (matches) {\r\n                const piece = matches[1];\r\n                const from = matches[2];\r\n                const to = matches[3];\r\n                const promotion = matches[4];\r\n\r\n                const target = (alg_to_hex(to))\r\n\r\n            const origin = determinePiece(board, color, board[target], piece_type, from)\r\n            \r\n            fend = submitMove(board, origin, target, piece_type, color, move, moveHistory, promotion);\r\n            \r\n            board = fenBoard(fend).board\r\n            white_pieces = fenBoard(fend).white_pieces\r\n            black_pieces = fenBoard(fend).black_pieces\r\n            \r\n            initADC(board, white_pieces, black_pieces);\r\n\r\n            } else if (\r\n                // castle short and long\r\n                clean_move === 'O-O-O' \r\n                || clean_move === 'O-O') {\r\n\r\n                fend = submitMove(board, null, null, null, color, clean_move, moveHistory);\r\n\r\n                board = fenBoard(fend).board\r\n                white_pieces = fenBoard(fend).white_pieces\r\n                black_pieces = fenBoard(fend).black_pieces\r\n                \r\n                initADC(board, white_pieces, black_pieces);\r\n    \r\n            }\r\n\r\n\r\n        })\r\n\r\n    setFen(fend)\r\n\r\n    }\r\n\r\n    // this function selects the proper piece to move \r\n    // output is the numeric ID of the origin square\r\n    const determinePiece = (board, color, target, piece_type, from) => {\r\n\r\n        let result;\r\n\r\n        let enPassant = false;\r\n\r\n\r\n        //first check if we are doing a pawn move \r\n        if (piece_type === 'p' && target.piece === null) {\r\n            // test backwards from target square to find a valid pawn move\r\n            const pawnMove = pawn_moves[color].find((move) => {\r\n                const testSquare = target.hexId - move;\r\n                // if our pawn is moving to an empty square, but pawns behind are wrong colour, \r\n                // then we must be taking a pawn en passant\r\n                if (board[testSquare].piece === 'p' && board[testSquare].pieceColor !== color) {\r\n                    \r\n                    enPassant = true;\r\n                    // the captured piece is removed before the board is sent to SubmitMove\r\n                    board[testSquare].piece = null;\r\n                } else {\r\n                    result = testSquare;\r\n                    return board[testSquare].piece === piece_type && board[testSquare].pieceColor === color\r\n                }\r\n\r\n               })\r\n\r\n        } \r\n        \r\n        if (piece_type !== 'p' || (piece_type === 'p' && target.piece !== null) || enPassant === true) {\r\n\r\n            // filter ControlledBy array on our target square to find valid piece for move\r\n            const testPieces = target.controlledBy.filter((piece) => {\r\n                return (piece.piece.toLowerCase() === piece_type.toLowerCase()) && piece.color === color\r\n            })\r\n            \r\n\r\n            // disambiguate result if there are multiple possible moves\r\n            if (testPieces.length > 1 && from !== undefined) {\r\n                const testPiece = testPieces.find((piece) => {\r\n                    return algebraic(piece.square).includes(from)\r\n                })\r\n            result = testPiece.square;\r\n            \r\n            } else {\r\n                \r\n                result = testPieces[0].square\r\n            }\r\n        }\r\n    \r\n\r\n        return result;\r\n\r\n\r\n    }\r\n\r\n    // chess.com player profile data:\r\n    // state.data.data: games: (array)\r\n    // game: .accuracies, .black, .white, etc\r\n    // for me: \r\n    // fen (ending position) \r\n    // initial_setup: (fen string)\r\n    // pgn: /n line breaks \r\n    // uuid is included \r\n    // end_time could be used for pagination cursor? \r\n\r\n    if (state.status === 'done') {\r\n        \r\n\r\n                    \r\n        return (\r\n            <Info>\r\n                <Tabs>\r\n                <Happy \r\n                className={viewDetails === 'profile' ? 'selected' : ''}\r\n                onClick={() => {setViewDetails('profile')}}\r\n                >PROFILE</Happy>\r\n                <Happy\r\n                className={viewDetails === 'archive' ? 'selected' : ''}\r\n                onClick={() => {\r\n                    setViewDetails('archive')\r\n                    if (loggedIn !== null) {\r\n                        setUrl(`https://api.chess.com/pub/player/${loggedIn}/games/archives`)\r\n                    } else {\r\n                        setUrl(`/api/db/players`) \r\n                    }}}\r\n                >ARCHIVE</Happy>\r\n\r\n                <Happy\r\n                className={viewDetails === 'examples' ? 'selected' : ''}\r\n                onClick={() => {\r\n                    \r\n                    setUrl(`/api/db/players`)\r\n                    setViewDetails('examples')\r\n                }}\r\n                \r\n                >EXAMPLES</Happy>\r\n\r\n                </Tabs>\r\n                {viewDetails === 'archive' && state.data?.archives && <GamesList>\r\n                    {state.data.archives.map((arch, index) => {\r\n                    const yyyymm = arch.match(/\\d+\\/\\d\\d/)\r\n                    return <Game\r\n                    key={index}\r\n                    onClick={\r\n                        () => {\r\n                            setUrl(`https://api.chess.com/pub/player/${loggedIn}/games/${yyyymm}`)\r\n                        }\r\n                    }\r\n                    >\r\n                        {yyyymm}\r\n                    </Game>\r\n                })}\r\n                </GamesList>}\r\n                \r\n                {viewDetails === 'archive' && state.data?.games && <GamesList>\r\n                {state.data.games.map((game, index) => {\r\n                        return <Game\r\n                        key={index}\r\n                        onClick={\r\n                            () => {\r\n                                \r\n                                const pgn = lazyPGN(game.pgn);\r\n                                load_pgn(pgn);\r\n                            }\r\n                        }\r\n                        >\r\n                            {game.white.username} vs {game.black.username}\r\n                        </Game>\r\n                    })}\r\n                    </GamesList>}\r\n                \r\n                {state.data?.data && (viewDetails === 'examples' || (!loggedIn && viewDetails === 'archive')) && <GamesList>\r\n                {state.data.data.map((player) => {             \r\n                    return player.games.map((game, index) => {\r\n                        return <Game\r\n                        key={index}\r\n                        onClick={() => {\r\n                            //const pgn = lazyPGN(games[3].pgn)\r\n                            const pgn = lazyPGN(game)\r\n                            load_pgn(pgn);\r\n                        }}\r\n                        >{player.name} game {index + 1}</Game>\r\n                    })\r\n                })} \r\n                </GamesList>}\r\n                {viewDetails === 'profile' && \r\n                <Profile>\r\n                    <Handle\r\n                    placeholder={'Chess.com username'}\r\n                    value={inputHandle}\r\n                    onChange={(ev) => {\r\n                        setInputHandle(ev.target.value)\r\n                    }}\r\n                    />\r\n                    {\r\n                        <Login\r\n                        onClick={() => {\r\n                            sessionStorage.setItem(\"currentUser\", inputHandle)\r\n                            setUrl(`https://api.chess.com/pub/player/${inputHandle}/games/archives`) \r\n                        }}\r\n                        >Log In</Login>}\r\n                        {loggedIn}\r\n                </Profile>}\r\n            </Info>\r\n            )\r\n\r\n    } else if (state.status === 'error') {\r\n        return <Info>There doesn't seem to be anything here!</Info>\r\n    } else {\r\n        return <Info>Loading Profile...</Info>\r\n    }\r\n\r\n}\r\n\r\n\r\nconst Login = styled.button`\r\npadding: 5px;\r\n`\r\nconst Handle = styled.input`\r\n    padding: 10px;\r\n    width: 15vw;\r\n    height: 1vh;\r\n    min-width: 150px;\r\n    min-height: 30px;\r\n`\r\n\r\nconst Profile = styled.div`\r\n    padding: 10px;\r\n    width: 23vw;\r\n    height: 16vh;\r\n    min-width: 190px;\r\n    min-height: 50px;\r\n`\r\n\r\nconst Tabs = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`\r\n\r\n//have a happy time\r\nconst Happy = styled.button`\r\n    background: none;\r\n    color: inherit;\r\n    border: none;\r\n    padding: 0;\r\n    font: inherit;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    margin: 0 10px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 7vw;\r\n    height: 20px;\r\n    border-bottom: 1px solid gray;\r\n    background-color: #181A1B;\r\n    border-radius: 15%;\r\n    &.selected{\r\n        border-bottom: none;\r\n    }\r\n`\r\n\r\nconst Info = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center; \r\n    flex-direction: column;\r\n    border: 1px solid gray;\r\n    padding: 10px;\r\n    width: 25vw;\r\n    height: 25vh;\r\n    min-width: 200px;\r\n    min-height: 100px;\r\n`\r\n\r\nconst GamesList = styled.div`\r\n    background-color: #555;\r\n    padding: 10px;\r\n    width: 23vw;\r\n    height: 16vh;\r\n    min-width: 190px;\r\n    min-height: 50px;\r\n    overflow-y: scroll;\r\n`\r\nconst Game = styled.div`\r\n    background-color: #555;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport default GameInfo;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    background-color: #181A1B;\r\n    color: #eee;\r\n    }\r\n\r\n  html, body {\r\n    max-width: 100vw;\r\n  }\r\n\r\n\r\n  /* http://meyerweb.com/eric/tools/css/reset/\r\n    v2.0 | 20110126\r\n    License: none (public domain)\r\n  */\r\n\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed,\r\n  figure, figcaption, footer, header, hgroup,\r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    vertical-align: baseline;\r\n  }\r\n  /* HTML5 display-role reset for older browsers */\r\n  article, aside, details, figcaption, figure,\r\n  footer, header, hgroup, menu, nav, section {\r\n    display: block;\r\n  }\r\n\r\n  ol, ul {\r\n    list-style: none;\r\n  }\r\n  blockquote, q {\r\n    quotes: none;\r\n  }\r\n  blockquote:before, blockquote:after,\r\n  q:before, q:after {\r\n    content: '';\r\n    content: none;\r\n  }\r\n\r\n  body {\r\n    line-height: 1.25;\r\n    background: #222;\r\n    color: white;\r\n  }\r\n\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst BoardOptions = ({\r\n    showBlkCtrl,\r\n    showWhtCtrl,\r\n    setShowBlkCtrl, \r\n    setShowWhtCtrl}) => {\r\n\r\n    return (<>\r\n        <Options>\r\n            <Option>Black Control: <button onClick={() => {setShowBlkCtrl(showBlkCtrl === 1 ? 0 : 1)}}>show/hide</button></Option>\r\n            <Spacer></Spacer>\r\n            <Option>White Control:  <button onClick={() => {setShowWhtCtrl(showWhtCtrl === 1 ? 0 : 1)}}>show/hide</button></Option>\r\n        </Options>\r\n    </>\r\n    )\r\n}\r\n\r\nconst Options = styled.div`\r\n    border: 1px solid whitesmoke;\r\n    margin-top: 20px;\r\n    width: 25vw;\r\n    height: auto;\r\n    min-width: 200px;\r\n    min-height: 100px;\r\n    padding: 10px 20px;\r\n`\r\n\r\nconst Option = styled.div`\r\n`\r\nconst Spacer = styled.div`\r\nheight: 10px;\r\n`\r\n\r\nexport default BoardOptions","import { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport DisplayFEN from \"./Components/DisplayFEN\";\nimport GameBoard from \"./Components/GameBoard\";\nimport MoveHistory from \"./Components/MoveHistory\";\nimport GameInfo from \"./Components/GameInfo\";\nimport { startingPosition } from \"./Constants/constants\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport BoardOptions from \"./Components/BoardOptions\";\n\n\nfunction App() {\n  const [fen, setFen] = useState(startingPosition);\n  const moveHistory = useRef([]);\n\n  const [showBlkCtrl, setShowBlkCtrl] = useState(1);\n  \n  const [showWhtCtrl, setShowWhtCtrl] = useState(1);\n  \n\n  return (\n    <div className=\"App\" style={{backgroundColor: \"#181A1B\", margin: \"0\"}}>\n      <GlobalStyles />\n      <Page>\n        <GameBoard \n        fen={fen}\n        setFen={setFen}\n        moveHistory={moveHistory}\n        showBlkCtrl={showBlkCtrl}\n        showWhtCtrl={showWhtCtrl}\n        \n          />\n        <Info>\n          <GameInfo setFen={setFen} moveHistory={moveHistory}/>\n          <DisplayFEN  fen={fen} setFen={setFen}/>\n          <BoardOptions \n          setShowBlkCtrl={setShowBlkCtrl}\n          setShowWhtCtrl={setShowWhtCtrl}\n          showBlkCtrl={showBlkCtrl}\n          showWhtCtrl={showWhtCtrl}\n          />\n          <MoveHistory moveHistory={moveHistory} setFen={setFen}/>\n        </Info>\n      </Page>\n    </div>\n  );\n}\n\n\nconst Page = styled.div`\n  margin: 0;\n  margin-top: 40px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  background-color: #181A1B;\n  color: whitesmoke;\n`\nconst Info = styled.div`\n  margin: 0;\n  margin-top: 25px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  font-size: larger;\n`\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}