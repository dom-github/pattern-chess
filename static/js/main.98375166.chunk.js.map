{"version":3,"sources":["data/Players.js","Constants/constants.js","Components/DisplayFEN.js","Functions/ADC.js","Functions/utils.js","Functions/fenBoard.js","Functions/submitMove.js","Functions/fenGen.js","Components/GameBoard.js","assets/pieceslisa/bb.png","assets/pieceslisa/kb.png","assets/pieceslisa/kw.png","assets/pieceslisa/nb.png","assets/pieceslisa/nw.png","assets/pieceslisa/qb.png","assets/pieceslisa/qw.png","assets/pieceslisa/rb.png","assets/pieceslisa/rw.png","Components/MoveHistory.js","CustomHooks/useFetch.js","Components/GameInfo.js","GlobalStyles.js","Components/BoardOptions.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","players","name","games","startingPosition","piece_moves","n","b","r","q","k","pawn_captures","w","pawn_moves","ranks","files","SQUARES","Fen","styled","input","_templateObject","_taggedTemplateLiteral","DisplayFEN","_ref","fen","setFen","_useState","useState","_useState2","_slicedToArray","setInput","boardInits","boardCurrents","validateFEN","fenCheck","validate","rows","split","length","i","sum","previous_was_number","j","isNaN","test","parseInt","_jsx","type","value","onChange","ev","target","includes","setADC","board","piece","square","color","forEach","move","_board$targetSquare","targetSquare","controlledBy","push","_board$targetSquare2","_board$targetSquare3","initADC","white_pieces","black_pieces","info","pieceType","toLowerCase","squareHex","algebraic","f","file","rank","substring","fenBoard","pieces","charAt","indexOf","numEmpty","hexId","algId","pieceColor","pieceInfo","squareAlg","match","submitMove","from","to","moveSAN","moveHistory","promotion","pieceCase","console","log","ksq","rsq","kDest","rDest","toUpperCase","empty","fenGen","newHistory","concat","_toConsumableArray","current","san","pieceStrings","Wrapper","div","InfoWrapper","_templateObject2","Square","_templateObject3","Piece","img","_templateObject4","Ranks","_templateObject5","Rank","_templateObject6","Files","_templateObject7","File","_templateObject8","Board","_templateObject9","GameBoard","showBlkCtrl","showWhtCtrl","selected","setSelected","clickSquare","id","_fenBoard","whtScore","blkScore","_jsxs","children","map","findex","rindex","selectedId","multiplier","isSelected","find","obj","Object","values","allyControl","filter","x","enemyControl","importance","blue","red","className","onClick","src","style","_objectSpread","backgroundColor","Moves","Move","span","MoveHistory","index","pieceChar","number","useFetch","url","initialState","status","error","data","_useReducer","useReducer","state","action","payload","_useReducer2","dispatch","cache","useRef","useEffect","cancelRequest","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","_data","wrap","_context","prev","next","fetch","sent","json","t0","abrupt","message","stop","apply","arguments","Login","button","Handle","Profile","Tabs","Happy","Info","GamesList","Game","GameInfo","_state$data","_state$data2","viewDetails","setViewDetails","_useState3","_useState4","inputHandle","setInputHandle","loggedIn","sessionStorage","getItem","_useState5","_useState6","setUrl","lazyPGN","pgn","parsed","str","rav_regex","replace","RegExp","pop","load_pgn","fend","clean_move","stripped_san","matches","piece_type","infer_piece_type","an","a","charCodeAt","splitAN","fileVal","alg_to_hex","origin","determinePiece","result","enPassant","testSquare","testPieces","undefined","testPiece","archives","toReversed","arch","yyyymm","game","white","username","black","player","placeholder","setItem","createGlobalStyle","Options","Option","Spacer","BoardOptions","setShowBlkCtrl","setShowWhtCtrl","_Fragment","Page","App","margin","GlobalStyles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98375166.chunk.js","sourcesContent":["const players = [\r\n    {\r\n        name: \"Paul Morphy\",\r\n        games: [\r\n`[Event \"Paris\"]\r\n[Site \"Paris FRA\"]\r\n[Date \"1858.??.??\"]\r\n[EventDate \"?\"]\r\n[Round \"?\"]\r\n[Result \"1-0\"]\r\n[White \"Paul Morphy\"]\r\n[Black \"Duke Karl / Count Isouard\"]\r\n[ECO \"C41\"]\r\n[WhiteElo \"?\"]\r\n[BlackElo \"?\"]\r\n[PlyCount \"33\"]\r\n\r\n1.e4 e5 2.Nf3 d6 3.d4 Bg4 4.dxe5 Bxf3 5.Qxf3 dxe5 6.Bc4 Nf6 7.Qb3 Qe7\r\n8.Nc3 c6 9.Bg5 b5 10.Nxb5 cxb5 11.Bxb5+ Nbd7 12.O-O-O Rd8\r\n13.Rxd7 Rxd7 14.Rd1 Qe6 15.Bxd7+ Nxd7 16.Qb8+ Nxb8 17.Rd8# 1-0`,\r\n`[Event \"Paris it\"]\r\n[Site \"Paris\"]\r\n[Date \"1858.??.??\"]\r\n[Round \"?\"]\r\n[White \"De Saint Amant, Pierre Charles Four\"]\r\n[Black \"Morphy, Paul \"]\r\n[Result \"0-1\"]\r\n[WhiteElo \"\"]\r\n[BlackElo \"\"]\r\n[ECO \"C54\"]\r\n\r\n1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.c3 Nf6 5.d4 exd4 6.cxd4 Bb4+ 7.Bd2 Bxd2+ 8.Nbxd2 d5\r\n9.exd5 Nxd5 10.O-O O-O 11.h3 Nf4 12.Kh2 Nxd4 13.Nxd4 Qxd4 14.Qc2 Qd6 15.Kh1 Qh6\r\n16.Qc3 Bf5 17.Kh2 Rad8 18.Rad1 Bxh3 19.gxh3 Rd3 20.Qxd3 Nxd3 21.Bxd3 Qd6+\r\n22.f4 Qxd3  0-1`\r\n            \r\n        ]\r\n    },\r\n    {\r\n        name: \"Mikhail Tal\",\r\n        games: [\r\n`[Event \"Zurich\"]\r\n[Site \"Zurich SUI\"]\r\n[Date \"1959.05.24\"]\r\n[EventDate \"1959.05.19\"]\r\n[Round \"5\"]\r\n[Result \"1-0\"]\r\n[White \"Mikhail Tal\"]\r\n[Black \"Erwin Nievergelt\"]\r\n[ECO \"B63\"]\r\n[WhiteElo \"?\"]\r\n[BlackElo \"?\"]\r\n[PlyCount \"73\"]\r\n\r\n1.e4 c5 2.Nf3 Nc6 3.d4 cxd4 4.Nxd4 Nf6 5.Nc3 d6 6.Bg5 e6 7.Qd2\r\nh6 8.Bxf6 gxf6 9.O-O-O a6 10.f4 Bd7 11.Be2 h5 12.Kb1 Qb6\r\n13.Nb3 O-O-O 14.Rhf1 Be7 15.Rf3 Rdg8 16.Bf1 Kb8 17.Rd3 Bc8\r\n18.a3 h4 19.Qe1 Rg4 20.Nd5 exd5 21.exd5 Ne5 22.fxe5 fxe5\r\n23.Na5 Bd8 24.Nc6+ Ka8 25.Rb3 Qc7 26.Rc3 bxc6 27.Rxc6 Qb7\r\n28.Rxd6 Ra4 29.Rd3 Bc7 30.Rf6 Bd8 31.Rc6 e4 32.Rb3 Ba5 33.Qe3\r\nQa7 34.Qh6 Rd8 35.Bxa6 Bd2 36.Qf6 Qd7 37.Bxc8+ 1-0`,\r\n`[Event \"Interpolis 4th\"]\r\n[Site \"Tilburg NED\"]\r\n[Date \"1980.09.27\"]\r\n[EventDate \"?\"]\r\n[Round \"7\"]\r\n[Result \"1-0\"]\r\n[White \"Mikhail Tal\"]\r\n[Black \"Boris Spassky\"]\r\n[ECO \"C95\"]\r\n[WhiteElo \"?\"]\r\n[BlackElo \"?\"]\r\n[PlyCount \"87\"]\r\n\r\n1.e4 e5 2.Nf3 Nc6 3.Bb5 a6 4.Ba4 Nf6 5.O-O Be7 6.Re1 b5 7.Bb3\r\nd6 8.c3 O-O 9.h3 Nb8 10.d4 Nbd7 11.Nbd2 Bb7 12.Bc2 Re8 13.Nf1\r\nBf8 14.Ng3 g6 15.a4 c5 16.d5 c4 17.Bg5 h6 18.Be3 Rb8 19.Qd2 h5\r\n20.Ng5 Nh7 21.Nxh7 Kxh7 22.Rf1 Kg8 23.Kh1 Bg7 24.axb5 axb5\r\n25.f4 exf4 26.Bxf4 Qe7 27.Bg5 Qe5 28.Rf3 Ra8 29.Raf1 Rf8\r\n30.Nxh5 gxh5 31.Rf5 Qe8 32.e5 dxe5 33.Bh6 Ra6 34.Bxg7 Kxg7\r\n35.d6 f6 36.Rg5+ Kf7 37.Bg6+ Ke6 38.Bf5+ Kf7 39.Qd1 Rh8\r\n40.Bg6+ Ke6 41.Bxe8 Rxe8 42.Qxh5 Rd8 43.Rg7 Kxd6 44.Qf7 1-0`\r\n        ]\r\n    }\r\n]\r\n\r\nmodule.exports = {players}","\r\n\r\n    export const startingPosition = `rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1`;\r\n\r\n    //0x88\r\n    export const piece_moves = {\r\n        n: [-18, -33, -31, -14, 18, 33, 31, 14],\r\n        b: [-17, -15, 17, 15],\r\n        r: [-16, 1, 16, -1],\r\n        q: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n        k: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n    }\r\n\r\n    export const pawn_captures = {\r\n        b: [17, 15],\r\n        w: [-17, -15],\r\n    }\r\n    \r\n    export const pawn_moves = {\r\n        b: [16, 32],\r\n        w: [-16, -32],\r\n    }\r\n    \r\n    \r\n\r\n    export const ranks = [8, 7, 6, 5, 4, 3, 2, 1]\r\n    export const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\r\n\r\n    // table of valid board squares in 0x88 format \r\n    export const SQUARES = {\r\n        a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n        a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n        a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n        a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n        a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n        a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n        a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n        a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n\r\n    // obj template - example \r\n    const squareInfo = {\r\n        algebraicId: 'a1', // square's ID in algebraic notation, e.g. a1, f3, h8\r\n        hexId: 0,   // ID in 0x88 board representation, e.g. 0-7, 16-23, 32-39...\r\n        piece: 'empty', // current piece on this square \r\n        pieceColor: 'empty',    // current piece's color - maybe unnecessary, implicit piece color W vs b\r\n        controlledBy: [],   // array of all pieces that attack, defend, or control this square \r\n    }\r\n    //","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { startingPosition } from \"../Constants/constants\";\r\n\r\nconst DisplayFEN = ({fen, setFen}) => {\r\n\r\n    const [input, setInput] = useState(fen);\r\n\r\n    const boardInits = [\r\n        \"new\",\r\n        \"start\",\r\n        \"chess\",\r\n        \"standard\",\r\n        \"default\",\r\n        \"init\",\r\n        \"new\",\r\n        \"reset\",\r\n        \"normal\",\r\n        \"regular\"\r\n        ]\r\n\r\n    const boardCurrents = [\"now\", \"current\", \"cur\", \"board\", \"update\", \"get\"]\r\n\r\n    const validateFEN = (fenCheck) => {\r\n                \r\n        // do some basic checks on our input string\r\n        // to see if user is trying to generate their own FEN board layout\r\n\r\n        //default to true\r\n        let validate = true;\r\n\r\n        const fenTokens = fenCheck.split(/\\s+/)\r\n\r\n        const rows = fenTokens[0].split('/')\r\n\r\n        if (rows.length !== 8) {\r\n            validate = false;\r\n        }\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            // make sure it always adds up to 64, without invalid integers (e.g. 26 instead of 8)\r\n            let sum = 0\r\n            let previous_was_number = false \r\n\r\n            // processing each row \r\n            for (let j = 0; j < rows[i].length; j++) {\r\n                if (!isNaN(rows[i][j])) {\r\n                    if (previous_was_number) {\r\n                        validate = false;\r\n                    }\r\n\r\n                    sum += parseInt(rows[i][j], 10)\r\n                    previous_was_number = true;\r\n\r\n                } else {\r\n\r\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][j])) {\r\n                        validate = false;\r\n                    }\r\n\r\n                    sum += 1;\r\n                    previous_was_number = false;\r\n                }\r\n            }\r\n            if (sum !== 8) {\r\n                validate = false;\r\n            }\r\n        }\r\n\r\n        return validate;\r\n    }\r\n\r\n    return <Fen \r\n    type={'text'}\r\n    value={validateFEN(input) ? fen : input}\r\n    onChange={(ev) => {\r\n            setInput(ev.target.value);\r\n        if (validateFEN(ev.target.value)) {\r\n            setFen(ev.target.value);\r\n        } else if (boardInits.includes(ev.target.value, 0)) {\r\n            setFen(startingPosition);\r\n            setInput(startingPosition);\r\n        } else if (boardCurrents.includes(ev.target.value, 0)) {\r\n            setInput(fen);\r\n        } else if (ev.target.value === 'blank' || ev.target.value === 'empty') {\r\n            setFen(\"8/8/8/8/8/8/8/8\")\r\n            setInput(\"8/8/8/8/8/8/8/8\");\r\n        }\r\n\r\n        }\r\n    }\r\n    />\r\n\r\n}\r\n\r\nconst Fen = styled.input`\r\n    margin-top: 20px;\r\n    width: 95%;\r\n    @media (min-width: 1280px) {\r\n        width: 25vw;\r\n    }\r\n    border: 1px solid gray;\r\n    border-radius: 10px;\r\n    padding: 10px 20px;\r\n`\r\n\r\nexport default DisplayFEN;\r\n","\r\nimport {  \r\n    piece_moves, \r\n    pawn_captures\r\n    } from \"../Constants/constants\";\r\n\r\n    // calculate the Attacked, Defended, and Controlled squares of a given piece\r\n    // this has to be done after the full board is rendered and all piece positions are placed\r\n    // square refers to decimal ID for now\r\n    const setADC = (board, piece, square, color) => {\r\n        if (piece === 'p') {\r\n            pawn_captures[color].forEach((move) => {\r\n                const targetSquare = square + move;\r\n                if (targetSquare & 0x88) {\r\n                    //console.log(targetSquare)\r\n                    return;\r\n                } else {\r\n                    //console.log(board[targetSquare])\r\n\r\n                    board[targetSquare]?.controlledBy.push({piece: piece, color: color, square: square})\r\n                }\r\n            })\r\n        } else {\r\n            piece_moves[piece].forEach((move) => {\r\n\r\n                // for non-pawn pieces \r\n                // set a target square according to move offset \r\n                // if king or knight, break\r\n                // for bishop, rook, queen (sliding pieces):\r\n                // while targetSquare.piece === null\r\n                // set controlled and += offset \r\n                // break when hits invalid or occupied square\r\n                let targetSquare = square + move;\r\n\r\n                while (!(targetSquare & 0x88)) {\r\n                    //console.log('Target:', targetSquare, 'Piece:', piece)\r\n                    board[targetSquare]?.controlledBy.push({piece: piece, color: color, square: square})\r\n                    //stop immediately for kings and knights \r\n                    if (piece === 'n' || piece === 'k') break;\r\n\r\n                    if (board[targetSquare]?.piece !== null) {\r\n                        //console.log('Break!', 'piece:', piece)\r\n                        break};\r\n\r\n                    //bishops, rooks, queens do the calculation again\r\n                    targetSquare += move;\r\n                }\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    export const initADC = (board, white_pieces, black_pieces) => {\r\n        //console.log('ADC init')\r\n        white_pieces.forEach((info) => {\r\n            const pieceType = info.piece.toLowerCase();\r\n            const square = info.squareHex;\r\n            const color = 'w'\r\n\r\n            setADC(board, pieceType, square, color)\r\n        })\r\n\r\n        black_pieces.forEach((info) => {\r\n            const pieceType = info.piece.toLowerCase();\r\n            const square = info.squareHex;\r\n            const color = 'b'\r\n\r\n            setADC(board, pieceType, square, color)\r\n        })\r\n    }\r\n\r\n","\r\n/*****************************************************************************\r\n   * UTILITY FUNCTIONS\r\n   ****************************************************************************/\r\n    \r\nconst rank = (i) => {\r\n    return i >> 4\r\n}\r\n\r\nconst file = (i) => {\r\n    return i & 15\r\n}\r\n\r\nexport const algebraic = (i) => {\r\n    var f = file(i),\r\n    r = rank(i)\r\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\r\n}\r\n\r\nconst swap_color = (c) => {\r\n    return c === 'w' ? 'b' : 'w'\r\n}\r\n\r\n// util function to determine if string is a number\r\nexport const is_digit = (d) => {\r\n    return '0123456789'.indexOf(d) !== -1\r\n}\r\n\r\n\r\n    // alg square to 0x88\r\n    export const alg_to_hex = (an) => {\r\n        // always returns two strings: file, rank\r\n        const a = \"a\".charCodeAt(0)\r\n        const splitAN = an.split(\"\")\r\n        const fileVal = splitAN[0].charCodeAt(0) - a\r\n        const rankVal = ( 8 - (parseInt(splitAN[1])) ) * 16\r\n\r\n        return (rankVal + fileVal)\r\n\r\n            \r\n\r\n    }\r\n    //trim whitespace around string\r\n    export const trim = (str) => {\r\n        return str.replace(/^\\s+|\\s+$/g, '')\r\n    }\r\n\r\n    // parses all of the decorators out of a SAN string\r\n    export const stripped_san = (move) => {\r\n        return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\r\n    }","\r\n    // this function takes a FEN string as input and fills the board array with values for the initial render\r\n\r\nimport { algebraic, is_digit } from \"./utils\";\r\n\r\n    export const fenBoard = (fen) => {\r\n\r\n\r\n        const board = [];\r\n\r\n        const white_pieces = [];\r\n        const black_pieces = [];\r\n\r\n\t\tconst items = fen.split(/\\s+/); // split the FEN pieces from other info\r\n\t\tconst pieces = items[0];  // idgaf about anything but the pieces\r\n        let square = 0\r\n    \r\n        for (var i = 0; i < pieces.length; i++) {\r\n            var piece = pieces.charAt(i)\r\n            //console.log('FEN cur piece:', piece)\r\n            if (piece === '/') {\r\n                square += 8\r\n                for (let i = 0; i < 8; i++) {\r\n                    board.push(null)\r\n                }\r\n            } else if (is_digit(piece)) {\r\n                // empty squares\r\n                // is a number = create blank spaces\r\n                const numEmpty = parseInt(piece, 10)\r\n                for (let i = 0; i < numEmpty; i++) {\r\n                    board.push({\r\n                        //algebraicId: Object.keys(SQUARES)[square],\r\n                        hexId: square,\r\n                        algId: algebraic(square),\r\n                        piece: null,\r\n                        pieceColor: null,\r\n                        controlledBy: []\r\n                    })\r\n                    square ++\r\n                }\r\n            } else {\r\n                // pieces on a square\r\n                // if a piece is present on a square\r\n                // add that info to the square's Object\r\n                // then calculate the ADC info for that piece\r\n                // finally update the controlledBy array for those pieces\r\n                // this is where our calculations might get stupidly expensive\r\n                \r\n                const pieceInfo = {\r\n                        piece: piece,\r\n                        squareHex: square,\r\n                        squareAlg: algebraic(square)\r\n\r\n                    }\r\n\r\n                piece.match(/[A-Z]/)\r\n                ? white_pieces.push(pieceInfo)\r\n                : black_pieces.push(pieceInfo)\r\n\r\n                board.push({\r\n                    //algebraicId: Object.keys(SQUARES)[square],\r\n                    hexId: square,\r\n                    algId: algebraic(square),\r\n                    piece: piece.toLowerCase(),\r\n                    pieceColor: piece.match(/[A-Z]/)? 'w': 'b',\r\n                    controlledBy: []\r\n                })\r\n                square++\r\n            }\r\n        }\r\n\r\n        return {board, white_pieces, black_pieces}\r\n    }\r\n","import { fenGen } from \"./fenGen\";\r\n\r\nexport const submitMove = (board, from, to, piece, color, moveSAN, moveHistory, promotion) => {\r\n    \r\n    console.log(board, from, to, piece, color, moveSAN)\r\n    \r\n    let pieceCase;\r\n\r\n    // handle castling manually \r\n    if (moveSAN === 'O-O' || moveSAN === 'O-O-O') {\r\n        // short: move king to G file, rook to F\r\n        // k: 4 r: 7 | K: 116 R: 119\r\n        // long: move king to C file, rook to D file\r\n        // k: 4 r: 0 | K: 116 R: 112\r\n        const ksq = color === 'w' ? 116 : 4\r\n        const rside = moveSAN === 'O-O' ? 7 : 0\r\n\r\n        const rsq = rside + (color === 'w' ? 112 : 0)\r\n\r\n        //short: k: 6 r: 5 | K: 118 R: 117\r\n        //long:  k: 2 r: 3 | K: 114 R: 115\r\n        const kDest = ksq + (moveSAN === 'O-O' ? 2 : -2)\r\n        const rDest = rsq + (moveSAN === 'O-O' ? -2 : 3)\r\n\r\n        board[ksq].piece = null;\r\n        board[ksq].pieceColor = null;\r\n\r\n        board[rsq].piece = null;\r\n        board[rsq].pieceColor = null;\r\n        \r\n        board[kDest].piece = 'k';\r\n        board[kDest].pieceColor = color;\r\n\r\n        board[rDest].piece = 'r';\r\n        board[rDest].pieceColor = color;\r\n        pieceCase = color === 'w' ? 'K' : 'k'\r\n\r\n    } else {\r\n\r\n        board[from].piece = null;\r\n        board[from].pieceColor = null;\r\n\r\n        board[to].piece = promotion ? promotion : piece;\r\n        board[to].pieceColor = color;\r\n\r\n        pieceCase = color === 'w' ? piece.toUpperCase() : piece.toLowerCase()\r\n\r\n    }\r\n\r\n\r\n    const fen = fenGen(board)\r\n    const newHistory = ([...moveHistory.current, {san: moveSAN, piece: pieceCase, fen: fen}])\r\n    moveHistory.current = newHistory\r\n    \r\n    return fen\r\n}","import { SQUARES } from \"../Constants/constants\"\r\n\r\n\r\nexport const fenGen = (board) => {\r\n  let empty = 0\r\n  let fen = ''\r\n\r\n  for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n      if (board[i].piece == null) {\r\n      empty++\r\n      } else {\r\n      if (empty > 0) {\r\n          fen += empty\r\n          empty = 0\r\n      }\r\n\r\n      \r\n      const piece = board[i].piece\r\n      const color = board[i].pieceColor\r\n\r\n      fen += color === 'w' ? piece.toUpperCase() : piece.toLowerCase()\r\n      }\r\n\r\n      if ((i + 1) & 0x88) {\r\n      if (empty > 0) {\r\n          fen += empty\r\n      }\r\n\r\n      if (i !== SQUARES.h1) {\r\n          fen += '/'\r\n      }\r\n\r\n      empty = 0\r\n      i += 8\r\n      }\r\n  }\r\n\r\n  //console.log(fen)\r\n  return fen\r\n}\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {  \r\n    ranks, \r\n    files, } from \"../Constants/constants\";\r\nimport { initADC } from \"../Functions/ADC\";\r\nimport { fenBoard } from \"../Functions/fenBoard\";\r\nimport { submitMove } from \"../Functions/submitMove\";\r\nimport { algebraic } from \"../Functions/utils\";\r\n\r\nimport empty from '../assets/pieceslisa/em.png';\r\n//why must I suffer\r\nimport  bb  from '../assets/pieceslisa/bb.png';\r\nimport  bw  from '../assets/pieceslisa/bw.png';\r\nimport  kb  from '../assets/pieceslisa/kb.png';\r\nimport  kw  from '../assets/pieceslisa/kw.png';\r\nimport  nb  from '../assets/pieceslisa/nb.png';\r\nimport  nw  from '../assets/pieceslisa/nw.png';\r\nimport  pb  from '../assets/pieceslisa/pb.png';\r\nimport  pw  from '../assets/pieceslisa/pw.png';\r\nimport  qb  from '../assets/pieceslisa/qb.png';\r\nimport  qw  from '../assets/pieceslisa/qw.png';\r\nimport  rb  from '../assets/pieceslisa/rb.png';\r\nimport  rw  from '../assets/pieceslisa/rw.png';\r\n\r\n//workaround to package images in React instead of serving thru public folder\r\nconst pieceImages = [bb, bw, kb, kw, nb, nw, pb, pw, qb, qw, rb, rw];\r\nconst pieceStrings = [\"bb\", \"bw\", \"kb\", \"kw\", \"nb\", \"nw\", \"pb\", \"pw\", \"qb\", \"qw\", \"rb\", \"rw\"];\r\n//import { parsePGN, loadPGN, move_from_san } from \"../Functions/parsePGN\";\r\n\r\n//rendering the basic game board \r\n\r\n//FEN setup:\r\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\r\n\r\n// r = rookb R = rookw\r\n// n = knightb N = knightw\r\n// b = bishopb B = bishopw\r\n// q = queenb Q = queenw\r\n// k = kingb K = kingw\r\n// p = pawnb P = pawnw\r\n\r\nconst GameBoard = ({\r\n    fen, \r\n    setFen, \r\n    moveHistory,    \r\n    showBlkCtrl,\r\n    showWhtCtrl\r\n    }) => {\r\n\r\n    const [selected, setSelected] = useState();\r\n\r\n    const clickSquare = (ev) => {\r\n        //prints the info stored in the clicked square\r\n        const square = board[ev.target.id]\r\n\r\n        if (selected) {\r\n            const piece = selected.piece;\r\n            const color = selected.pieceColor;\r\n            const moveSAN = algebraic(ev.target.id)\r\n            \r\n            if (selected.hexId !== parseInt(ev.target.id)) {\r\n                const newHistory = submitMove(board, selected.hexId, ev.target.id, piece, color, moveSAN, moveHistory)\r\n                setFen(newHistory);\r\n            }\r\n            setSelected();\r\n            } else {\r\n            square.piece \r\n            ? setSelected(square)\r\n            : setSelected()\r\n            }\r\n    }\r\n\r\n    // load and reload board\r\n    const {board, white_pieces, black_pieces} = fenBoard(fen)\r\n\r\n    initADC(board, white_pieces, black_pieces);\r\n\r\n    let whtScore = 0;\r\n    let blkScore = 0;\r\n    \r\n    return (\r\n        <InfoWrapper>\r\n        <Wrapper>\r\n            <Ranks>\r\n                {ranks.map((rank) => {\r\n                    return <Rank key={rank}>{rank}</Rank>\r\n                })}\r\n            </Ranks>\r\n            {files.map((file, findex) => {\r\n                return <Board \r\n                id={file}\r\n                key={file}>{ranks.map((rank, rindex) => {\r\n\r\n                    // 1 render sets the entire board including tiles and pieces\r\n                    // helper constants are set conditionally so we can display an empty board\r\n                    const id = (findex) + (16 * rindex)\r\n                    const selectedId = selected ? selected.hexId : -1;\r\n                    const square = board[id]\r\n                    const piece = square ? square.piece : 0;\r\n                    const color = square ? square.pieceColor : 0;\r\n                    const controlledBy = square ? square.controlledBy : [];\r\n                    // occupied squares are brighter\r\n                    const multiplier = piece ? 1 : 0.75;\r\n\r\n                    \r\n                    const isSelected = id === selectedId \r\n                        || controlledBy.find((obj) => {\r\n                            return Object.values(obj).includes(selectedId, 0)\r\n                                //&& !(Object.values(obj).includes('p', 0))\r\n                            })\r\n                         ? true : false;\r\n                    //\r\n                    const allyControl = controlledBy.filter(x => x.color === 'w')\r\n                    const enemyControl = controlledBy.filter(x => x.color === 'b')\r\n                    \r\n                    const alpha = 0.33 //0.15 * ((allyControl.length * showWhtCtrl) + (enemyControl.length * showBlkCtrl)) * multiplier;\r\n                    const importance = 5 * ((allyControl.length * showWhtCtrl) + (enemyControl.length * showBlkCtrl));\r\n                    const blue = ((allyControl?.length * 100) * multiplier * showWhtCtrl);\r\n                    const red = ((enemyControl?.length * 100) * multiplier * showBlkCtrl);\r\n                    whtScore += blue;\r\n                    blkScore += red;\r\n                    console.log(\"White:\", whtScore, \"Black:\", blkScore)\r\n                    // green value is set only for uncontested squares \r\n                    const green = 15;\r\n                        // controlledBy \r\n                        // && square.piece === null\r\n                        // && (allyControl.length === 0 \r\n                        //     || enemyControl.length === 0) \r\n                        //     ? 75 * controlledBy.length \r\n                        //     : 0;\r\n                    const img = pieceStrings.indexOf(`${piece}${color}`)\r\n\r\n                    return <Square \r\n                    id={id}\r\n                    key={rank}\r\n                    className={\r\n                        (findex % 2 === 0 && rindex % 2 === 0)\r\n                        || (findex % 2 !== 0 && rindex % 2 !== 0) \r\n                        || (showBlkCtrl || showWhtCtrl)\r\n                        ? 'white'\r\n                        : 'black'\r\n                    }\r\n                    ><Piece\r\n                            id={id}\r\n                            onClick={clickSquare}\r\n                            src={piece ? `./assets/pieceslisa/${piece}${color}.png` : `./assets/pieceslisa/em.png`}\r\n                            className={\r\n                                isSelected === true\r\n                                ? 'selected'\r\n                                : 'none'\r\n                            }   \r\n                            style={{...styled,\r\n                                filter: `drop-shadow(0px 0px ${importance}px rgba(${red}, 0, ${blue}, 0.75))`,\r\n                                backgroundColor: `rgba(${red}, ${green}, ${blue}, ${alpha})`\r\n                            }}\r\n                            />\r\n                    </Square>\r\n                })}</Board>\r\n            })}\r\n        </Wrapper>\r\n            <Files>\r\n                {files.map((file) => {\r\n                    return <File key={file}>{file}</File>\r\n                })}\r\n            </Files>\r\n        </InfoWrapper>\r\n    )\r\n}\r\n\r\n//temp\r\n//\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\nconst InfoWrapper = styled.div`\r\n    width: 95vw;\r\n    height: 95vw;\r\n    max-height: 900px;\r\n    padding-right: 5vw;\r\n    @media (min-width: 1280px) {\r\n    width: 60vw;\r\n    height: 98vh;\r\n    }\r\n`\r\n\r\nconst Square = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 10vw;\r\n    height: 10vw;\r\n    max-width: 100px;\r\n    max-height: 100px;\r\n    border: 1px solid gray;\r\n    background-color: #181A1B;\r\n    &.black{\r\n        //disabled\r\n        background-color: #333;\r\n    }\r\n`\r\n\r\nconst Piece = styled.img`\r\n    position: absolute;\r\n    width: inherit;\r\n    height: inherit;\r\n    max-width: 100px;\r\n    max-height: 100px;\r\n    &.selected{\r\n        \r\n        box-shadow: 0 0 10px 0 yellow;\r\n        //border-radius: 50%;\r\n    }\r\n`\r\nconst Ranks = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`\r\nconst Rank = styled.div`\r\n    text-align: center;\r\n    align-items: center;\r\n    width: 10vw;\r\n    height: 10vw;\r\n    max-width: 100px;\r\n    max-height: 100px;\r\n    position: relative;\r\n    top: 5vh;\r\n`\r\n\r\nconst Files = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n    width: 100%;\r\n    @media (min-width: 1280px) {\r\n        width: 60vw;\r\n    }\r\n    justify-content: center;\r\n`\r\nconst File = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 10vw;\r\n    height: 10vw;\r\n    max-width: 100px;\r\n    max-height: 100px;\r\n    position: relative;\r\n    left: 5px;\r\n    top: 5px;\r\n`\r\nconst Board = styled.div`\r\nmargin-top: 20px;\r\n`\r\n\r\nexport default GameBoard;","export default __webpack_public_path__ + \"static/media/bb.ec6cc0cb.png\";","export default __webpack_public_path__ + \"static/media/kb.b91cfc68.png\";","export default __webpack_public_path__ + \"static/media/kw.c80fc893.png\";","export default __webpack_public_path__ + \"static/media/nb.1e17da50.png\";","export default __webpack_public_path__ + \"static/media/nw.1807d5c9.png\";","export default __webpack_public_path__ + \"static/media/qb.c8211d7a.png\";","export default __webpack_public_path__ + \"static/media/qw.dd5a3f08.png\";","export default __webpack_public_path__ + \"static/media/rb.ce72d38c.png\";","export default __webpack_public_path__ + \"static/media/rw.7472e158.png\";","import styled from \"styled-components\";\r\n\r\nconst MoveHistory = ({moveHistory, setFen}) => {\r\n\r\n    // console.log(\r\n    //     \"b:\", \"b\".charCodeAt(0), //98\r\n    //     \"k:\", \"k\".charCodeAt(0), //107\r\n    //     \"n:\", \"n\".charCodeAt(0), //110\r\n    //     \"p:\", \"p\".charCodeAt(0), //112\r\n    //     \"q:\", \"q\".charCodeAt(0), //113\r\n    //     \"r:\", \"r\".charCodeAt(0), //114\r\n    // )\r\n    \r\n    // alphabetical order: bishop, king, (k)night, pawn, queen, rook\r\n    const pieces = \"bknpqrBKNPQR\";\r\n    const pieceChars = \"♗♔♘♙♕♖♝♚♞♟♛♜\"\r\n\r\n    // chess piece characters \r\n    // ♜\t♞\t♝\t♛\t♚\t♝\t♞\t♜\r\n    // ♟\t♟\t♟\t♟\t♟\t♟\t♟\t♟\r\n\r\n    // ♙\t♙\t♙\t♙\t♙\t♙\t♙\t♙\r\n    // ♖\t♘\t♗\t♕\t♔\t♗\t♘\t♖\r\n\r\n    return (\r\n        <Wrapper>Move History:\r\n            <Moves>\r\n                {moveHistory.current.map((move, index) => {\r\n                    const san = move.san\r\n                    const piece = move.piece\r\n                    const fen = move.fen\r\n                    const pieceChar = pieceChars.charAt(pieces.indexOf(piece));\r\n\r\n                    const comma = (index + 1) === moveHistory.current.length ? '' : \", \"\r\n                    const space = \"\\u00A0\";\r\n\r\n                    const number = index % 2 === 0 ? `${(index / 2) + 1}. ` : '';\r\n                    return <Move \r\n                        key={index}\r\n                        onClick={() => {\r\n                            setFen(fen)\r\n                        }}>{number}{pieceChar}{san}</Move>\r\n                })}\r\n            </Moves>\r\n        </Wrapper>\r\n\r\n\r\n    )\r\n    \r\n}\r\n\r\nconst Wrapper = styled.div`\r\npadding: 20px 40px;\r\n    margin-top: 20px;\r\n    border: 2px solid whitesmoke;\r\n    \r\n    width: 95%;\r\n  @media (min-width: 1280px) {\r\n    width: 25vw;\r\n    height: auto;\r\n  }\r\n    min-height: 200px;\r\n    text-align: center;\r\n`\r\n\r\nconst Moves = styled.div`\r\n    text-decoration: none;\r\n    max-height: 25vh;\r\n    overflow-y: scroll;\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n\r\n`\r\nconst Move = styled.span`\r\n    width: 50%;\r\n    display: flex;\r\n    justify-content: left;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n\r\n`\r\n\r\nexport default MoveHistory;\r\n\r\n\r\n\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\n\r\n    //~~~\"Stop trying to make fetch happen\"~~~\r\n\r\n\r\n// the useFetch hook uses a UseEffect + reducer\r\n// in your React component, call {state} = useFetch('/api-url')\r\n// the {state} will contain a Status (loading/done/error) and the Data that was fetched\r\n// it also stores the output in a cached array, so calling the same api-url\r\n// will not need to send a request to the server, unless the data has changed\r\n\r\n// Note that fetch will also return Data, so to access you will need to use state.data.data \r\n// I recommend using state.status for the Loading/Done/Error check, then assigning a variable:\r\n// {data} = state.data\r\n\r\nconst useFetch = (url) => {\r\n\r\nconst initialState = {\r\n    status: 'loading',\r\n    error: null,\r\n    data: [],\r\n};\r\n\r\n\r\nconst [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n        case 'FETCHING':\r\n            \r\n            return { ...initialState, status: 'loading' };\r\n        case 'FETCHED':\r\n            \r\n            return { ...initialState, status: 'done', data: action.payload };\r\n        case 'FETCH_ERROR':\r\n            \r\n            return { ...initialState, status: 'error', error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}, initialState);\r\n\r\n    \r\n    \r\n    const cache = useRef({});\r\n\r\n    useEffect(() => {\r\n        let cancelRequest = false;\r\n        if (!url) return;   //do nothing in case of no url \r\n\r\n        const fetchData = async () => {\r\n            dispatch({ type: 'FETCHING' });\r\n            if (cache.current[url]) {\r\n                console.log(\"fetching cached datatata!\")\r\n                const data = cache.current[url];\r\n                dispatch({type: 'FETCHED', payload: data})\r\n            } else {\r\n                try {\r\n                    \r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                cache.current[url] = data; // sets the data in a cache array using useRef\r\n                dispatch({type: 'FETCHED', payload: data})\r\n                } catch (error) {\r\n                    if (cancelRequest) return;\r\n                    dispatch({type: 'FETCH_ERROR', payload: error.message})\r\n                }\r\n            }\r\n        };\r\n        \r\n        fetchData();\r\n\r\n        //cleanup function\r\n        return function cleanup() {\r\n            cancelRequest = true;\r\n        };\r\n    }, [url]);\r\n    \r\n    return {state}\r\n}\r\n\r\n\r\nexport default useFetch;","import useFetch from \"../CustomHooks/useFetch\";\r\nimport styled from \"styled-components\";\r\nimport { submitMove } from \"../Functions/submitMove\";\r\nimport { fenBoard } from \"../Functions/fenBoard\";\r\nimport { pawn_moves, startingPosition } from \"../Constants/constants\";\r\nimport { initADC } from \"../Functions/ADC\";\r\nimport { algebraic, alg_to_hex, stripped_san, trim } from \"../Functions/utils\";\r\nimport { useState } from \"react\";\r\nimport { players } from \"../data/Players\";\r\n\r\n\r\nconst GameInfo = ({moveHistory, setFen}) => {\r\n\r\n    const [viewDetails, setViewDetails] = useState('examples')\r\n    const [inputHandle, setInputHandle] = useState('')\r\n\r\n    const loggedIn = sessionStorage.getItem(\"currentUser\") \r\n    \r\n    const [url, setUrl] = useState()\r\n\r\n    const {state} = useFetch(url)\r\n\r\n    //const {state} = useFetch(`https://api.chess.com/pub/player/connordontknowme/games/2021/10`)\r\n\r\n    // temp disable\r\n    // const state = {status: 'done'}\r\n\r\n\r\n    // This is a PGN parser built to handle nice,\r\n    // logically laid-out PGNs. Maybe there can be bugs\r\n    // with non-standard notations, or notation errors\r\n    // \"Regex, I love you, but you're bringing me down...\"\r\n\r\n    const lazyPGN = (pgn) => {    \r\n\r\n        //const terminations = ['1-0', '0-1', '1/2-1/2', '*']\r\n  \r\n        // split headers and moves\r\n        let parsed = pgn.split(/\\n\\n/);\r\n    \r\n\r\n        // I can use some of the headers info maybe\r\n        //const headers = parsed[0]\r\n        //console.log(parsed[0])\r\n\r\n        //only moves etc\r\n        parsed = parsed[(parsed.length - 1)]\r\n\r\n        /* delete recursive annotation variations */\r\n        // whoever thought it was a good idea to nest PGN comments...\r\n        // with alternate move lines... with nested comments... with alternate move lines...\r\n        const rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(parsed)) {\r\n            parsed = parsed.replace(rav_regex, '')\r\n        }\r\n\r\n        // delete comments from move info\r\n        parsed = parsed.replace(/{(.*?)}|\\((.*?)\\)/g, '')\r\n        \r\n\r\n        // deleting move numbers \r\n        parsed = parsed.replace(/\\d+\\.(\\.\\.)?/g, '')\r\n\r\n        // delete ... indicating black to move \r\n        parsed = parsed.replace(/\\.\\.\\./g, '')\r\n    \r\n        // deleting numeric annotation glyphs \r\n        parsed = parsed.replace(/\\$\\d+/g, '')\r\n\r\n        /* trim and get array of moves */\r\n        parsed = trim(parsed).split(new RegExp(/\\s+/))\r\n\r\n        // remove ending result\r\n        parsed.pop(parsed.length)\r\n\r\n\r\n        //load_pgn(parsed);\r\n\r\n        return parsed;\r\n\r\n    }\r\n\r\n\r\n    \r\n    const infer_piece_type = (san) => {\r\n        var piece_type = san.charAt(0)\r\n        if (piece_type >= 'a' && piece_type <= 'h') {\r\n            var matches = san.match(/[a-h]\\d.*[a-h]\\d/)\r\n            if (matches) {\r\n            return undefined\r\n            }\r\n            \r\n            return 'p'\r\n        }\r\n        piece_type = piece_type.toLowerCase()\r\n        if (piece_type === 'o') {\r\n            return 'k'\r\n        }\r\n        return piece_type\r\n    }\r\n    \r\n    // this takes a lazy-parsed PGN string and recreates all the moves\r\n    // pushing them into 'history'\r\n\r\n    // functionality:\r\n    // assume white to start (I don't think I need to handle exceptions for this)\r\n    // get last 2 letters for each string (\"to\" square)\r\n    // then we need to parse the remainder:\r\n    // blank === pawn move... we need to grab the right colour pawn,\r\n    // check first for 1sq then 2sq in appropriate colour side (in case doubled pawns)\r\n\r\n    // if capital letter is first, get pieces of type per turn colour \r\n    // then if there are multiples of a piece we need to check valid move \r\n    // if we get multiple matches we need to check for disambiguation, \r\n    // get file or rank of origin from string\r\n    // if this information is missing, I guess just take whichever and \r\n    // blame the bad notation... calculating ahead to infer is overkill!\r\n\r\n    // if the \"to:\" square is occupied, the piece will be removed\r\n    // so capture notation can be ignored in the process but still included\r\n\r\n    // make sure that checks + and checkmates # are ignored in the move parse\r\n    // but still appear in the history notation\r\n\r\n    // when the move is castling, we process 2 moves (king and rook) but only\r\n    // submit 1 event to history, with proper notation (O-O or O-O-O)\r\n\r\n    // if a pawn is taken en-passant the notation can be dicey or ambiguous\r\n    // try to handle this -- but it is the least common move in chess\r\n    // if \"to\" square is unoccupied, but takes is specified ('x'), and piece is pawn\r\n    // check 1sq \"up\" and if it's a pawn, assume an EP capture\r\n    // if notation specifies e.p. above should handle, but parser will need to ignore\r\n\r\n    // finally, we should specify the piece in our notation using the chesspiece symbols\r\n\r\n    //accepts an array of individual moves in PGN notation \r\n    const load_pgn = (pgn) => {\r\n\r\n        // clear history when starting load \r\n        moveHistory.current = []\r\n\r\n        // init board\r\n        let {board, white_pieces, black_pieces} = fenBoard(startingPosition)\r\n\r\n        initADC(board, white_pieces, black_pieces);\r\n\r\n        // this gets updated per-move\r\n        let fend = startingPosition;\r\n\r\n        pgn.forEach((move, index) => {\r\n\r\n            // get the color of move (white/black)\r\n            const color = index % 2 === 0 ? 'w' : 'b'\r\n\r\n            //remove unnecessary symbols for calculation\r\n            const clean_move = stripped_san(move)\r\n\r\n            //console.log(\"Move:\", move, \"Clean Move:\", clean_move, \"Turn:\", color)\r\n\r\n            // get \"to\" square: last digit in string, preceded by a letter \r\n            //const targetSquare = move.match(/[a-h][1-8]/);\r\n\r\n            // new stacked regex, nice \r\n            const matches = clean_move.match(\r\n                /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\r\n            )\r\n\r\n            const piece_type = infer_piece_type(clean_move);\r\n\r\n            if (matches) {\r\n                const piece = matches[1];\r\n                const from = matches[2];\r\n                const to = matches[3];\r\n                const promotion = matches[4];\r\n\r\n                const target = (alg_to_hex(to))\r\n\r\n            const origin = determinePiece(board, color, board[target], piece_type, from)\r\n            \r\n            fend = submitMove(board, origin, target, piece_type, color, move, moveHistory, promotion);\r\n            \r\n            board = fenBoard(fend).board\r\n            white_pieces = fenBoard(fend).white_pieces\r\n            black_pieces = fenBoard(fend).black_pieces\r\n            \r\n            initADC(board, white_pieces, black_pieces);\r\n\r\n            } else if (\r\n                // castle short and long\r\n                clean_move === 'O-O-O' \r\n                || clean_move === 'O-O') {\r\n\r\n                fend = submitMove(board, null, null, null, color, clean_move, moveHistory);\r\n\r\n                board = fenBoard(fend).board\r\n                white_pieces = fenBoard(fend).white_pieces\r\n                black_pieces = fenBoard(fend).black_pieces\r\n                \r\n                initADC(board, white_pieces, black_pieces);\r\n    \r\n            }\r\n\r\n\r\n        })\r\n\r\n    setFen(fend)\r\n\r\n    }\r\n\r\n    // this function selects the proper piece to move \r\n    // output is the numeric ID of the origin square\r\n    const determinePiece = (board, color, target, piece_type, from) => {\r\n\r\n        let result;\r\n\r\n        let enPassant = false;\r\n\r\n\r\n        //first check if we are doing a pawn move \r\n        if (piece_type === 'p' && target.piece === null) {\r\n            // test backwards from target square to find a valid pawn move\r\n            const pawnMove = pawn_moves[color].find((move) => {\r\n                const testSquare = target.hexId - move;\r\n                // if our pawn is moving to an empty square, but pawns behind are wrong colour, \r\n                // then we must be taking a pawn en passant\r\n                if (board[testSquare].piece === 'p' && board[testSquare].pieceColor !== color) {\r\n                    \r\n                    enPassant = true;\r\n                    // the captured piece is removed before the board is sent to SubmitMove\r\n                    board[testSquare].piece = null;\r\n                } else {\r\n                    result = testSquare;\r\n                    return board[testSquare].piece === piece_type && board[testSquare].pieceColor === color\r\n                }\r\n\r\n               })\r\n\r\n        } \r\n        \r\n        if (piece_type !== 'p' || (piece_type === 'p' && target.piece !== null) || enPassant === true) {\r\n\r\n            // filter ControlledBy array on our target square to find valid piece for move\r\n            const testPieces = target.controlledBy.filter((piece) => {\r\n                return (piece.piece.toLowerCase() === piece_type.toLowerCase()) && piece.color === color\r\n            })\r\n            \r\n\r\n            // disambiguate result if there are multiple possible moves\r\n            if (testPieces.length > 1 && from !== undefined) {\r\n                const testPiece = testPieces.find((piece) => {\r\n                    return algebraic(piece.square).includes(from)\r\n                })\r\n            result = testPiece.square;\r\n            \r\n            } else {\r\n                \r\n                result = testPieces[0].square\r\n            }\r\n        }\r\n    \r\n\r\n        return result;\r\n\r\n\r\n    }\r\n\r\n    // chess.com player profile data:\r\n    // state.data.data: games: (array)\r\n    // game: .accuracies, .black, .white, etc\r\n    // for me: \r\n    // fen (ending position) \r\n    // initial_setup: (fen string)\r\n    // pgn: /n line breaks \r\n    // uuid is included \r\n    // end_time could be used for pagination cursor? \r\n\r\n    //DB connectivity disabled for static site\r\n    if (1===1) {\r\n        \r\n\r\n                    \r\n        return (\r\n            <Info>\r\n                <Tabs>\r\n                <Happy \r\n                className={viewDetails === 'profile' ? 'selected' : ''}\r\n                onClick={() => {setViewDetails('profile')}}\r\n                >PROFILE</Happy>\r\n                <Happy\r\n                className={viewDetails === 'archive' ? 'selected' : ''}\r\n                onClick={() => {\r\n                    setViewDetails('archive')\r\n                    if (loggedIn !== null) {\r\n                        setUrl(`https://api.chess.com/pub/player/${loggedIn}/games/archives`)\r\n                    } else {\r\n                        setUrl() \r\n                    }}}\r\n                >ARCHIVE</Happy>\r\n\r\n                <Happy\r\n                className={viewDetails === 'examples' ? 'selected' : ''}\r\n                onClick={() => {\r\n                    \r\n                    setUrl()\r\n                    setViewDetails('examples')\r\n                }}\r\n                \r\n                >EXAMPLES</Happy>\r\n\r\n                </Tabs>\r\n                {viewDetails === 'archive' && state.data?.archives && <GamesList>\r\n                    {state.data.archives.toReversed().map((arch, index) => {\r\n                    const yyyymm = arch.match(/\\d+\\/\\d\\d/)\r\n                    return <Game\r\n                    key={index}\r\n                    onClick={\r\n                        () => {\r\n                            setUrl(`https://api.chess.com/pub/player/${loggedIn}/games/${yyyymm}`)\r\n                        }\r\n                    }\r\n                    >\r\n                        {yyyymm}\r\n                    </Game>\r\n                })}\r\n                </GamesList>}\r\n                \r\n                {viewDetails === 'archive' && state.data?.games && <GamesList>\r\n                {state.data.games.map((game, index) => {\r\n                        return <Game\r\n                        key={index}\r\n                        onClick={\r\n                            () => {\r\n                                \r\n                                const pgn = lazyPGN(game.pgn);\r\n                                load_pgn(pgn);\r\n                            }\r\n                        }\r\n                        >\r\n                            {game.white.username} vs {game.black.username}\r\n                        </Game>\r\n                    })}\r\n                    </GamesList>}\r\n                \r\n                {(viewDetails === 'examples' || (!loggedIn && viewDetails === 'archive')) && <GamesList>\r\n                {players.map((player) => {    \r\n                    //no longer uses external DB \r\n                    return player.games.map((game, index) => {\r\n                        return <Game\r\n                        key={index}\r\n                        onClick={() => {\r\n                            //const pgn = lazyPGN(games[3].pgn)\r\n                            const pgn = lazyPGN(game)\r\n                            load_pgn(pgn);\r\n                        }}\r\n                        >{player.name} game {index + 1}</Game>\r\n                    })\r\n                })} \r\n                </GamesList>}\r\n                {viewDetails === 'profile' && \r\n                <Profile>\r\n                    <Handle\r\n                    placeholder={'Chess.com username'}\r\n                    value={inputHandle}\r\n                    onChange={(ev) => {\r\n                        setInputHandle(ev.target.value)\r\n                    }}\r\n                    />\r\n                    {\r\n                        <Login\r\n                        onClick={() => {\r\n                            sessionStorage.setItem(\"currentUser\", inputHandle)\r\n                            setUrl(`https://api.chess.com/pub/player/${inputHandle}/games/archives`) \r\n                        }}\r\n                        >Log In</Login>}\r\n                        {loggedIn}\r\n                </Profile>}\r\n            </Info>\r\n            )\r\n\r\n    } else if (state.status === 'error') {\r\n        return <Info>There doesn't seem to be anything here!</Info>\r\n    } else {\r\n        return <Info>Loading Profile...</Info>\r\n    }\r\n\r\n}\r\n\r\n\r\nconst Login = styled.button`\r\npadding: 5px;\r\n`\r\nconst Handle = styled.input`\r\n    padding: 10px;\r\n  @media (min-width: 1280px) {\r\n    width: 15vw;\r\n    height: 1vh;\r\n  }\r\n`\r\n\r\nconst Profile = styled.div`\r\n    padding: 10px;\r\n  @media (min-width: 1280px) {\r\n    width: 23vw;\r\n    height: 16vh;\r\n  }\r\n`\r\n\r\nconst Tabs = styled.div`\r\n    width: 95%;\r\n    display: flex;\r\n    flex-direction: column;\r\n  @media (min-width: 1280px) {\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n`\r\n\r\n//have a happy time\r\nconst Happy = styled.button`\r\n    background: none;\r\n    color: inherit;\r\n    border: none;\r\n    padding: 0;\r\n    font: inherit;\r\n    cursor: pointer;\r\n    outline: inherit;\r\n    margin: 0 10px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-bottom: 1px solid gray;\r\n    background-color: #181A1B;\r\n    border-radius: 15%;\r\n    &.selected{\r\n        border-bottom: none;\r\n    }\r\n`\r\n\r\nconst Info = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center; \r\n    flex-direction: column;\r\n    border: 1px solid gray;\r\n    padding: 10px;\r\n    width: 95%;\r\n  @media (min-width: 1280px) {\r\n    \r\n    width: 25vw;\r\n    height: 25vh;\r\n  }\r\n    min-height: 200px;\r\n`\r\n\r\nconst GamesList = styled.div`\r\n    background-color: #555;\r\n    padding: 10px;\r\n\r\n    width: 95%;    \r\n  @media (min-width: 1280px) {\r\n    width: 23vw;\r\n  }\r\n    height: 16vh;\r\n    min-height: 50px;\r\n    overflow-y: scroll;\r\n`\r\nconst Game = styled.div`\r\n    background-color: #555;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport default GameInfo;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    background-color: #181A1B;\r\n    color: #eee;\r\n    }\r\n\r\n  html, body {\r\n    max-width: 100vw;\r\n  }\r\n\r\n\r\n  /* http://meyerweb.com/eric/tools/css/reset/\r\n    v2.0 | 20110126\r\n    License: none (public domain)\r\n  */\r\n\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed,\r\n  figure, figcaption, footer, header, hgroup,\r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    vertical-align: baseline;\r\n  }\r\n  /* HTML5 display-role reset for older browsers */\r\n  article, aside, details, figcaption, figure,\r\n  footer, header, hgroup, menu, nav, section {\r\n    display: block;\r\n  }\r\n\r\n  ol, ul {\r\n    list-style: none;\r\n  }\r\n  blockquote, q {\r\n    quotes: none;\r\n  }\r\n  blockquote:before, blockquote:after,\r\n  q:before, q:after {\r\n    content: '';\r\n    content: none;\r\n  }\r\n\r\n  body {\r\n    line-height: 1.25;\r\n    background: #222;\r\n    color: white;\r\n  }\r\n\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst BoardOptions = ({\r\n    showBlkCtrl,\r\n    showWhtCtrl,\r\n    setShowBlkCtrl, \r\n    setShowWhtCtrl}) => {\r\n\r\n    return (<>\r\n        <Options>\r\n            <Option>Black Control: <button onClick={() => {setShowBlkCtrl(showBlkCtrl === 1 ? 0 : 1)}}>show/hide</button></Option>\r\n            <Spacer></Spacer>\r\n            <Option>White Control:  <button onClick={() => {setShowWhtCtrl(showWhtCtrl === 1 ? 0 : 1)}}>show/hide</button></Option>\r\n        </Options>\r\n    </>\r\n    )\r\n}\r\n\r\nconst Options = styled.div`\r\n    border: 1px solid whitesmoke;\r\n    margin-top: 20px;\r\n    \r\n    width: 95%;\r\n  @media (min-width: 1280px) {\r\n    width: 25vw;\r\n    height: auto;\r\n  }\r\n    min-height: 100px;\r\n    padding: 10px 20px;\r\n`\r\n\r\nconst Option = styled.div`\r\n`\r\nconst Spacer = styled.div`\r\nheight: 10px;\r\n`\r\n\r\nexport default BoardOptions","import { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport DisplayFEN from \"./Components/DisplayFEN\";\nimport GameBoard from \"./Components/GameBoard\";\nimport MoveHistory from \"./Components/MoveHistory\";\nimport GameInfo from \"./Components/GameInfo\";\nimport { startingPosition } from \"./Constants/constants\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport BoardOptions from \"./Components/BoardOptions\";\n\n\nfunction App() {\n  const [fen, setFen] = useState(startingPosition);\n  const moveHistory = useRef([]);\n\n  const [showBlkCtrl, setShowBlkCtrl] = useState(1);\n  \n  const [showWhtCtrl, setShowWhtCtrl] = useState(1);\n  \n\n  return (\n    <div className=\"App\" style={{backgroundColor: \"#181A1B\", margin: \"0\"}}>\n      <GlobalStyles />\n      <Page>\n        <GameBoard \n        fen={fen}\n        setFen={setFen}\n        moveHistory={moveHistory}\n        showBlkCtrl={showBlkCtrl}\n        showWhtCtrl={showWhtCtrl}\n        \n          />\n        <Info>\n          <GameInfo setFen={setFen} moveHistory={moveHistory}/>\n          <DisplayFEN  fen={fen} setFen={setFen}/>\n          <BoardOptions \n          setShowBlkCtrl={setShowBlkCtrl}\n          setShowWhtCtrl={setShowWhtCtrl}\n          showBlkCtrl={showBlkCtrl}\n          showWhtCtrl={showWhtCtrl}\n          />\n          <MoveHistory moveHistory={moveHistory} setFen={setFen}/>\n        </Info>\n      </Page>\n    </div>\n  );\n}\n\n\nconst Page = styled.div`\n  margin: 0;\n  margin-top: 40px;\n  width: 96vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  @media (min-width: 1280px) {\n    flex-direction: row;\n    justify-content: space-around;\n  }\n  background-color: #181A1B;\n  color: whitesmoke;\n`\nconst Info = styled.div`\n  margin: 0;\n  margin-top: 25px;\n  margin-left: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-size: larger;\n`\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}